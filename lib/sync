#!/bin/bash
set -e -o pipefail -o noclobber
shopt -s nullglob

readonly argv0=aursync
readonly XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
readonly AURDEST=${AURDEST:-$XDG_CACHE_HOME/$argv0}
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

declare -a makepkg_args=(-cs) makechrootpkg_args=(-cu) aurbuild_args=()
declare -i chroot=0 view=1 chkver=1 update=0 snapshot=0 rotate=0 build=1 download=1

viewer() {
    if hash 2>/dev/null vifm; then
        vifm - '+view!'
    else
        command -- "${PAGER:-less}"
    fi
}

lib32() {
    awk -v arch="$(uname -m)" '{
        if(arch == "i686") {
            gsub(/^lib32-/,"")
            gsub(/^gcc-multilib$/,"")
        }; print
    }'
}

conf_file_repo() {
    awk -F'= ' '
        $1 ~ /^\[.+\]$/ {
            repo = substr($1, 2, length($1)-2)
        }
        $1 ~ /^Server/ && $2 ~ /^file:/ {
            printf("%s\n%s\n", repo, $2)
        }'
}

uniq_by() {
    awk -F'\t' -v i="$1" -v j="$2" '
        NR == FNR {
            a[$0]; next
        } {
            if($i in a && !($j in seen)) {
                print $0; seen[$j]
            }
        }' "$3" "$4"
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    plain "usage: $argv0 [-ABcDfLnprstTu] [long options] [--] pkgname..."
    exit 1
}

readonly -f viewer lib32 conf_file_repo uniq_by trap_exit usage

source /usr/share/makepkg/util.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

if getopt -T || (($? != 4)); then
    error "$argv0: util-linux getopt required"
    exit 22
fi

longopts=allan,bind:,chroot,directory:,force,ignore:,ignorearch,ignore-arch,log
longopts+=,noconfirm,no-confirm,nover,no-ver,noview,no-view,print,rmdeps,rm-deps
longopts+=,sign,temp,tar,repo:,root:,upgrades,aurutils,continue
shortopts=B:C:D:M:AcfLnprstTu

if TEMP=$(getopt -o "$shortopts" -l "$longopts" -n "$argv0" -- "$@"); then
    eval set -- "$TEMP"
else
    usage
fi

tmp=$(mktemp -dt "$argv0".XXXXXXXX); readonly tmp
trap 'trap_exit' EXIT

unset pkg pkg_i root repo
while true; do
    case "$1" in
        -c|--chroot)
            chroot=1
            aurbuild_args+=(-c)
            shift ;;
        -f|--force)
            aurbuild_args+=(-f)
            shift ;;
        -s|--sign)
            aurbuild_args+=(-s)
            shift ;;
        -C)
            aurbuild_args+=(-C "$2")
            shift 2 ;;
        -D|--directory)
            aurbuild_args+=(-D "$2")
            shift 2 ;;
        -M)
            aurbuild_args+=(-M "$2")
            shift 2 ;;
        -B|--bind)
            makechrootpkg_args+=(-d "$2")
            shift 2 ;;
        -T|--temp)
            makechrootpkg_args+=(-T)
            shift ;;
        -A|--ignorearch|--ignore-arch)
            makepkg_args+=(-A)
            shift ;;
        -L|--log)
            makepkg_args+=(-L)
            shift ;;
        -n|--noconfirm|--no-confirm)
            makepkg_args+=(--noconfirm)
            shift ;;
        -r|--rmdeps|--rm-deps)
            makepkg_args+=(-r)
            shift ;;
        -p|--print)
            build=0
            shift ;;
        -t|--tar)
            snapshot=1
            shift ;;
        -u|--upgrades)
            update=1
            shift ;;
        --allan|--aurutils)
            rotate=1
            shift ;;
        --continue)
            download=0
            shift ;;
        --ignore)
            IFS=, read -a pkg -r <<< "$2"
            pkg_i+=("${pkg[@]}")
            shift 2 ;;
        --nover|--no-ver)
            chkver=0
            shift ;;
        --noview|--no-view)
            view=0
            shift ;;
        --repo)
            repo=$2
            shift 2 ;;
        --root)
            root=$2
            shift 2 ;;
        *)
            shift
            break ;;
    esac
done

if ((rotate)); then
    if { hash rot13 && target=$(aurgrep .+ | shuf -n 1); } 2>/dev/null; then
        exec bash -c "{ \"$argv0\" -c \"$target\" && repo-elephant | rot13; } 2>&1 | rot13"
    else
        echo '?'; exit 16 # EBUSY
    fi
fi

if ! (($# + update)); then
    error "$argv0: no targets specified"
    exit 1
fi

if [[ -v repo ]]; then
    server=$(pacconf --single --repo="$repo" Server)
    server=${server#*://}
else
    mapfile -t conf < <(pacconf | conf_file_repo)

    case ${#conf[@]} in
        2) repo=${conf[0]}
           root=${conf[1]#*://} ;;
        0) error "$argv0: no file:// repository found"
           exit 2 ;;
        *) error "$argv0: repository choice is ambiguous (use --repo to specify)"
           printf -- '%s\t%s\n' "${conf[@]}" | column -t >&2
           exit 2 ;;
    esac
fi

msg2 "Using [$repo] repository"
root=$(realpath -- "${root-$server}")

if ! [[ -w $root/$repo.db && -r $root/$repo.db ]]; then
    error "$argv0: $repo: permission denied (read-write)"
    exit 13
fi

mkdir -p "$AURDEST"/snapshot
chmod -c 700 "$AURDEST"

cd_safe "$tmp"
mkdir patch

if ((update)); then
    mapfile -t < <(aurcheck -d "$repo" -lr "$root" | aurcheck -q)
    wait "$!"
fi

set -- "$@" "${MAPFILE[@]}"

if ! (($#)); then
    plain "there is nothing to do"
    exit
fi

msg "Resolving dependencies..."
aurchain -t -- "$@" >pkginfo_0

{ for i in "${pkg_i[@]}"; do
      warning "'$i': ignoring package"
      printf -- '%s\n' "$i"
  done

  if ((chkver)); then
      cut -f1,3 pkginfo_0 | aurcheck -d "$repo" -r "$root" -c
  fi
} >filter

if cut -f1 pkginfo_0 | lib32 | grep -Fxvf filter >queue_0; then
    uniq_by 1 2 queue_0 pkginfo_0 >pkginfo_1
else
    plain "there is nothing to do"
    exit
fi

cut -f2 "$tmp"/pkginfo_1 >"$tmp"/queue

if ((download)); then
    msg "Retrieving build files..."

    if ((snapshot)); then
        cd_safe "$AURDEST"/snapshot
        cut -f4 "$tmp"/pkginfo_1 | aurfetch -t
    else
        cd_safe "$AURDEST"
        cut -f2 "$tmp"/pkginfo_1 | aurfetch -L "$tmp"/patch
    fi
fi

if ((view)); then
    printf '%s\n' "$tmp"/patch/* | cat - "$tmp"/queue \
        | xargs -I{} find {} -maxdepth 1 | viewer
fi

if ((build)); then
    aurbuild_args+=(-d "$repo" -r "$root" -a "$tmp"/queue)

    if ((chroot)); then
        aurbuild "${aurbuild_args[@]}" -- "${makechrootpkg_args[@]}"
    else
        aurbuild "${aurbuild_args[@]}" -- "${makepkg_args[@]}"
    fi
else
    xargs -a "$tmp"/queue printf -- "$(pwd -P)/%s\\n"
fi

# vim: set et sw=4 sts=4 ft=sh:
