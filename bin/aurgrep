#!/bin/bash
readonly argv0=aurgrep
readonly aurweb='https://aur.archlinux.org'
readonly cache=${XDG_CACHE_HOME:-$HOME/.cache}/$argv0
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

# https://lists.archlinux.org/pipermail/aur-dev/2016-May/004036.html
declare -i delay=300
declare pkglist=packages

extract_date() {
    sed -n '1p' "$1" | awk -F', ' '{print $3}'
    sed -i '1d' "$1"
}

list_update() {
    if curl -fsS "$1" -o - | gzip -d - > "$2"; then
        extract_date "$2"
    else
        printf >&2 '%s\n' 'warning: failed to retrieve package list'
    fi
}

list_http_date() {
    curl -fsSI "$1" | awk -F', ' 'tolower($1) ~ /^date:/ {print $2}'
}

readonly -f extract_date list_update list_http_date

while getopts :bt OPT; do
    case "$OPT" in
        b) pkglist=pkgbase ;;
        t) delay=$OPTARG   ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

mkdir -p "$cache"
chmod -c 700 "$cache"
cd "$cache" || exit

if [[ -s $pkglist && -s timestamp ]]; then
    sec_l=$(date -f timestamp '+%s')
    sec_r=$(list_http_date "$aurweb/$pkglist.gz" | date -f - '+%s')

    if ((sec_l)) && ((sec_r)) && ((sec_r - sec_l > delay)); then
        list_update "$aurweb/$pkglist.gz" "$pkglist" > timestamp
    fi
else
    list_update "$aurweb/$pkglist.gz" "$pkglist" > timestamp
fi

pcregrep -e "$@" "$pkglist"

# vim: set et sw=4 sts=4 ft=sh:
