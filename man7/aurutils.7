'\" t
.TH AURUTILS 7 2016-12-25 AURUTILS
.SH NAME
aurutils \- helper tools for the arch user repository

.SH PROGRAMS
The below gives a short overview; see the respective documentation for
details.
.P
.BR aurbuild (1)
.RS 4
Build packages to a local repository
.RE

.P
.BR aurchain (1)
.RS 4
Solve and order dependencies using the AUR RPC
.RE

.P
.BR aurcheck (1)
.RS 4
Check packages in a given repository for AUR updates
.RE

.P
.BR aurfetch (1)
.RS 4
Download objects from an AUR repository
.RE

.P
.BR aurgrep (1)
.RS 4
Print lines matching a pattern in the AUR package list
.RE

.P
.BR aurqueue (1)
.RS 4
Order dependencies using .SRCINFO files
.RE

.P
.BR aursearch (1)
.RS 4
Search for AUR packages
.RE

.P
.BR aursift (1)
.RS 4
Filter packages in the Arch Linux repositories
.RE

.P
.BR aursync (1)
.RS 4
Download and build AUR packages automatically
.RE

.P
.BR officer (1)
.RS 4
Run pacman only considering the official repositories
.RE

.SH EXIT STATUS
Programs follow a subset of errno(3), or preserve command status where
applicable.
.P
See also EXIT STATUS in curl(1).

.SH CREATING A LOCAL REPOSITORY 
Configure the local repository in a separate pacman configuration,
for example in \fI/etc/pacman.d/custom\fR:
.EX

  [options]
  CacheDir = /var/cache/pacman/pkg
  CacheDir = /var/cache/pacman/custom
  CleanMethod = KeepCurrent

  [custom]
  SigLevel = Optional TrustAll
  Server = file:///var/cache/pacman/custom

.EE
Avoid naming the repository \fIlocal\fR, as this name is reserved by
pacman.
.P
Include the configuration in \fI/etc/pacman.conf\fR:
.EX

  # An example of a custom package repository.  See the pacman manpage for
  # tips on creating your own repositories.
  Include = /etc/pacman.d/custom

.EE
Add \fIInclude \fRto the \fBend \fRof pacman.conf, where possible.
.P
Create the repository root and database:
.EX

  $ sudo install -d /var/cache/pacman/custom -o $USER
  $ repo-add /var/cache/pacman/custom/custom.db.tar

.EE
If packages are already available, add them to the database:
.EX

  $ cd /var/cache/pacman/custom
  $ repo-add -n custom.db ./*.pkg.tar.xz

.EE
Synchronize pacman:
.EX

  $ sudo pacman -Syu

.EE
.SY Note:
It is recommended to use a pacman cache directory (\fICacheDir\fR) as
the package pool. This avoids checksum mismatches between built
packages and any cached versions.
.YS

.SY Tip:
Consider separate repositories for different purposes, such as
version control packages.
.YS

.SH MIGRATING FOREIGN PACKAGES
If built packages are available, follow the instructions in
\fBCreating a local repository\fR and move the packages to the new
location.

Missing packages may be recreated from system files. Before doing so,
it is recommended to check for mismatches between the pacman database
and the local filesystem:
.EX

  $ pacman -Qqm | paccheck --md5sum --quiet

.EE
If mismatches occur, consider rebuilding the respective
packages. Otherwise, recreate the packages with \fIbacman\fR:
.EX

  $ pacman -Qqm | while read -r b; do bacman "$b"; done

.EE
Results will be saved to \fIPKGDEST\fR, or to the current directory if
this variable is not set.

.SH EXAMPLES
Examples below assume that \fIbash\fR is used as the interactive shell.

Run actions on the dependency tree of an AUR package:
.EX

  $ aurchain foobar | while read -r pkg _; do ... done

.EE
Build all packages in the \fIpkgbuilds\fR github repository:
.EX

  $ git clone https://www.github.com/Earnestly/pkgbuilds
  $ cd pkgbuilds
  $ find -maxdepth 2 -name PKGBUILD -execdir mksrcinfo \\;
  $ aurqueue ./* > queue # Remove unwanted targets
  $ aurbuild -d custom -a queue

.EE
Print packages from the \fIcustom\fR repository that are not available
in the AUR:
.EX

  $ grep -Fxvf <(aurgrep .+) <(pacman -Slq custom)

.EE
As above, but for orphaned packages:
.EX

  $ pacman -Slq custom | xargs aursearch -Fr | \\
       jq -r '.[].results[] | select(.Maintainer == null)'

.EE
Print Perl modules that are both in the AUR and official repositories:
.EX

  $ aurgrep '^perl-.+' > perl.txt
  $ grep -Fxvf <(aursift < perl.txt) perl.txt

.EE
Search for packages with both 'wm' and 'git' in the name:
.EX

  $ aurgrep '(?.*=wm)(?.*=git)' | xargs aursearch -i

.EE
Build \fIplasma-desktop-git\fR and its dependencies in an nspawn container:
.EX

  $ aursync -c plasma-desktop-git

.EE
Build and update all AUR packages in a selected local repository:
.EX

  $ aursync -u

.EE
As above, but respect packages specified in pacman's IgnorePkg directive:
.EX

  $ aursync -u --ignore <(pacconf IgnorePkg | glob2regex.sh)

.EE
Update packages from the \fIcustom\fR repository that are installed on the host:
.EX

  $ aursync --repo=custom $(grep -Fxf <(pacman -Qq) <(pacman -Slq custom))

.EE
Build a package for a different architecture, here i686:
.EX

  $ setarch i686 aursync -c --repo=custom_i686 tclkit

.EE
Select a package matching \fIpony\fR and build the result:
.EX

  $ select a in $(aurgrep pony); do aursync "$a"; break; done

.EE
Print packages both in AUR and [community] and compare their versions:
.EX

  $ aurcheck -d community -a

.EE
Check foreign packages for AUR updates:
.EX

  $ expac -Q '%n\t%v' | aurcheck

.EE
Use helpers wich honor the \fIPACMAN\fR variable or cower with
\fI--ignorerepo\fR:
.EX

 $ PACMAN=officer pkgbuilder -Syu
 $ cower --ignorerepo=custom

.EE
.SY Note:
Unlike \fIaurcheck\fR, these only check updates for installed packages.
.YS

.SH AUTHORS
.MT https://github.com/AladW
Alad Wenter
.ME

.\" vim: set textwidth=72
