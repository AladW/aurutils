#!/bin/bash
set -e
readonly argv0=aurfetch
readonly aurweb='https://aur.archlinux.org'
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

declare -i aurball=0
declare logdir=/dev/null

clone() {
    declare -r remote=$1 logdir=$2

    while IFS= read -r; do
        # Avoid issues with exotic file system layouts (#274)
        git_wrap() { git --work-tree="$REPLY" --git-dir="$REPLY"/.git "$@"; }
        
        if [[ -d $REPLY/.git ]]; then
            # returns 0 even if nothing was fetched
            git_wrap fetch -v

            if [[ $(git_wrap rev-parse HEAD) != $(git_wrap rev-parse '@{upstream}') ]]; then
                if [[ -d $logdir ]]; then
                    git_wrap --no-pager log --patch --stat '..@{upstream}' \
                        >> "$logdir/$REPLY".patch
                fi

                git_wrap reset --hard HEAD
                git_wrap merge
            fi
        else
            git clone "$remote/$REPLY".git
        fi
    done
}

# stdin: /path/to/a.tar.gz
snapshot() {
    declare -r zipdir=$1

    cd "$zipdir"

    if type -P parallel >/dev/null 2>&1; then
        parallel --will-cite -X -j +5 --nice 10 --halt soon,fail=1 -r \
            curl -fLsS --remote-name-all --cert-status {}
    elif type -P aria2 >/dev/null 2>&1; then
        aria2c --stderr=true -i -
    else
        xargs -r curl -fLsS --remote-name-all --cert-status
    fi

    cd -

    for _ in "$zipdir"/*.tar.gz; do
        tar xvf "$_"
    done
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    printf '%s\n' "usage: $argv0 [-L logdir] [-t]" >&2
    exit 1
}

readonly -f clone snapshot trap_exit usage

while getopts :L:t OPT; do
    case $OPT in
        L) logdir=$OPTARG ;;
        t) aurball=1 ;;
        *) usage ;;
    esac
done

tmp=$(mktemp -dt "$argv0".XXXXXXXX)
trap 'trap_exit' EXIT

if ((aurball)); then
    xargs -d '\n' printf "$aurweb/%s\\n" | snapshot "$tmp"
else
    clone "$aurweb" "$logdir"
fi

# vim: set et sw=4 sts=4 ft=sh:
