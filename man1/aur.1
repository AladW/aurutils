'\" t
.TH AUR 1 2016-12-25 AURUTILS
.SH NAME
aur \- helper tool for the arch user repository

.SH PROGRAMS
The below gives a short overview; see the respective documentation for
details.
.P
.BR aur-build (1)
.RS 4
Build packages to a local repository.
.RE

.P
.BR aur-build-nspawn (1)
.RS 4
Build packages in an nspawn container.
.RE

.P
.BR aur-pkglist (1)
.RS 4
Print the AUR package list.
.RE

.P
.BR aur-rpc-deps (1)
.RS 4
Solve and order dependencies using the AUR RPC.
.RE

.P
.BR aur-updates (1)
.RS 4
Check packages in a given repository for AUR updates.
.RE

.P
.BR aur-fetch (1)
.RS 4
Download objects from an AUR repository.
.RE

.P
.BR aur-src-deps (1)
.RS 4
Order dependencies using .SRCINFO files.
.RE

.P
.BR aur-search (1)
.RS 4
Search for AUR packages.
.RE

.P
.BR aur-rfilter (1)
.RS 4
Filter packages in the Arch Linux repositories.
.RE

.P
.BR aur-sync (1)
.RS 4
Download and build AUR packages automatically
.RE

.SH EXIT STATUS
Programs follow a subset of errno(3), or preserve command status where
applicable.
.P
See also EXIT STATUS in curl(1).

.SH CREATING A LOCAL REPOSITORY 
Configure the local repository in a separate pacman configuration,
for example in \fI/etc/pacman.d/custom\fR:
.EX

  [options]
  CacheDir = /var/cache/pacman/pkg
  CacheDir = /var/cache/pacman/custom
  CleanMethod = KeepCurrent

  [custom]
  SigLevel = Optional TrustAll
  Server = file:///var/cache/pacman/custom

.EE
Avoid naming the repository \fIlocal\fR, as this name is reserved by
pacman.
.P
Include the configuration in \fI/etc/pacman.conf\fR:
.EX

  # An example of a custom package repository.  See the pacman manpage for
  # tips on creating your own repositories.
  Include = /etc/pacman.d/custom

.EE
Add \fIInclude \fRto the \fBend \fRof pacman.conf, where possible.
.P
Create the repository root and database:
.EX

  $ sudo install -d /var/cache/pacman/custom -o $USER
  $ repo-add /var/cache/pacman/custom/custom.db.tar

.EE
If packages are already available, add them to the database:
.EX

  $ cd /var/cache/pacman/custom
  $ repo-add -n custom.db.tar ./*.pkg.tar.xz

.EE
Synchronize pacman:
.EX

  $ sudo pacman -Syu

.EE
.SY Note:
It is recommended to use a pacman cache directory (\fICacheDir\fR) as
the package pool. This avoids checksum mismatches between built
packages and any cached versions.
.YS

.SY Tip:
Consider separate repositories for different purposes, such as
version control packages.
.YS

.SH MIGRATING FOREIGN PACKAGES
If built packages are available, follow the instructions in
\fBCreating a local repository\fR and move the packages to the new
location.

Missing packages may be recreated from system files. Before doing so,
it is recommended to check for mismatches between the pacman database
and the local filesystem:
.EX

  $ pacman -Qqm | paccheck --md5sum --quiet

.EE
If mismatches occur, consider rebuilding the respective
packages. Otherwise, recreate the packages with \fIbacman\fR:
.EX

  $ pacman -Qqm | while read -r b; do bacman "$b"; done

.EE
Results will be saved to \fIPKGDEST\fR, or to the current directory if
this variable is not set.

.SH EXAMPLES
Examples below assume that \fIbash\fR is used as the interactive shell.

Run actions on the dependency tree of an AUR package:
.EX

  $ aur rpc-deps foobar | while read -r pkg _; do ... done

.EE
Build all packages in the \fIpkgbuilds\fR github repository:
.EX

  $ git clone https://www.github.com/Earnestly/pkgbuilds
  $ cd pkgbuilds
  $ find -maxdepth 2 -name PKGBUILD -execdir mksrcinfo \\;
  $ aur src-deps ./* > queue # Remove unwanted targets
  $ aur build -d custom -a queue

.EE
Print packages from the \fIcustom\fR repository that are not available
in the AUR:
.EX

  $ grep -Fxvf <(aur pkglist) <(pacman -Slq custom)

.EE
As above, but for orphaned packages:
.EX

  $ pacman -Slq custom | xargs aur search -Fr | \\
       jq -r '.[].results[] | select(.Maintainer == null)'

.EE
Print Perl modules that are both in the AUR and official repositories:
.EX

  $ aur pkglist -P '^perl-.+' > perl.txt
  $ grep -Fxvf <(aur rfilter < perl.txt) perl.txt

.EE
Search for packages with both 'wm' and 'git' in the name:
.EX

  $ aur pkglist -P '(?=.*wm)(?=.*git)' | xargs aur search -i

.EE
Build \fIplasma-desktop-git\fR and its dependencies in an nspawn container:
.EX

  $ aur sync -c plasma-desktop-git

.EE
Build and update all AUR packages in a selected local repository:
.EX

  $ aur sync -u

.EE
Update packages from the \fIcustom\fR repository that are installed on the host:
.EX

  $ aur sync --repo=custom $(grep -Fxf <(pacman -Qq) <(pacman -Slq custom))

.EE
Build a package for a different architecture, here i686:
.EX

  $ setarch i686 aur sync -c --repo=custom_i686 tclkit

.EE
Select a package matching \fIpony\fR and build the result:
.EX

  $ select a in $(aur pkglist -F pony); do aursync "$a"; break; done

.EE
Print packages both in AUR and [community] and compare their versions:
.EX

  $ aur updates -d community -a

.EE
Check foreign packages for AUR updates:
.EX

  $ expac -Q '%n\t%v' | aur updates

.EE
Repository packages can be "made foreign" by temporarily removing the
repository from the pacman configuration. This can be used with programs
that only check foreign packages for AUR updates.

For example, create the following script in
\fI/usr/local/bin/mypacman\fR:
.EX

 #!/bin/sh
 pacman --config=/usr/share/devtools/pacman-extra.conf "$@"

.EE
This script can then be propagated through the \fIPACMAN\fR variable
for programs supporting it.

.SH AUTHORS
.MT https://github.com/AladW
Alad Wenter
.ME

.\" vim: set textwidth=72
