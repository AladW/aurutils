#!/bin/bash
set -o noclobber
readonly argv0=rpc-deps
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

declare mode=aur

count() {
    declare -i num

    if num=$(jq -r '.resultcount' "$1" | awk '{s += $1} END {print s}'); then
        printf '%d' "$num"
    else
        error "$argv0: invalid argument"
        exit 22
    fi
}

sort_by() {
    awk 'FNR == NR {
        a[$1] = $0; next
    } {
        if($0 in a)
            print a[$0]
    }' "$@"
}

strip_version() {
    sed -r 's/[<>=].*$//g'
}

tabulate() {
    jq -r '.results[]
        | .Name         as $name
        | .PackageBase  as $base
        | .Version      as $ver
        | .URLPath      as $url
        | ([$name] + .Depends + .MakeDepends + .CheckDepends)[]?
        | [$name, ., $base, $ver, $url] | @tsv' "$1"
}

chain() {
    declare -i num

    aur-query -t info -- "$@" > json/0 || exit
    num=$(count json/0)

    if [[ $num -lt 1 ]]; then
        error "$argv0: no packages found"
        exit 1
    fi

    for ((a = 1; a <= 30; ++a)); do
        declare -i sub=$((a-1))

        tabulate json/$sub | tee -a tsv/n > tsv/$sub

        cut -f1 tsv/$sub >> pkgname
        cut -f1 tsv/$sub >> seen

        # Avoid querying duplicates (#4)
        mapfile -t target < <(cut -f2 tsv/$sub | strip_version | grep -Fxvf seen)

        # XXX AUR does not support querying pkgver (#10)
        if [[ ${target[*]} ]]; then
            aur-query -t info -- "${target[@]}" > json/$a || exit
        else
            break
        fi

        num=$(count json/$a)

        if [[ $num -lt 1 ]]; then
            break
        else
            cut -f2 tsv/$sub >> seen
        fi
    done

    if ((a > 30)); then
        error "$argv0: total requests: $((++a)) (out of range)"
        exit 34
    fi

    if ! cut -f1,2 tsv/n | strip_version | tsort; then
        error "$argv0: invalid argument"
        exit 22
    fi
 
    cut -f2 --complement tsv/n | sort -uk1,1 > pkginfo
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    plain "usage: $argv0 [-at] pkgname..."
    exit 1
}

readonly -f count tabulate chain trap_exit usage

source /usr/share/makepkg/util.sh || exit

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

while getopts :at OPT; do
    case $OPT in
        a) mode=all ;;
        t) mode=tab ;;
        *) usage ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if ((!$#)); then
    usage
fi

tmp=$(mktemp -dt "$argv0".XXXXXXXX) || exit
trap 'trap_exit' EXIT

if cd "$tmp" && mkdir json tsv; then
    chain "$@" > order
else
    exit
fi

case $mode in
    aur) grep -Fxf pkgname order | tac ;;
    all) tac order ;;
    tab) tac order | sort_by pkginfo - ;;
esac

# vim: set et sw=4 sts=4 ft=sh:
