#!/bin/bash
set -e
readonly argv0=build
readonly startdir=$PWD
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

declare -a gpg_args=(--detach-sign --no-armor --batch)
declare -a makepkg_args=(-rs --noconfirm) makechrootpkg_args=(-cu)
declare -a chroot_args=() repo_add_args=()
declare -i chroot=0 no_sync=0 overwrite=0 sign_pkg=0

conf_single() {
    printf '[options]\n'
    pacconf --options --raw

    printf '[%s]\n' "$1"
    pacconf --repo="$1" --raw
}

db_replaces() {
    bsdcat "$1" | awk '/%REPLACES%/ {
        while(NF != 0) {getline; print}
    }'
}

find_pkg_dupes() {
    xargs -I{} find "$1" -name '{}*' | grep -Exv '.+(~|_namcap\.log|\.part|\.sig)$' -
}

trap_exit() {
    if ! [[ -o xtrace ]]; then
        rm -rf "$tmp" "$var_tmp"
    fi
}

usage() {
    plain "usage: $argv0 -d database [-afNrs] [--] <makepkg args>"
    exit 1
}

readonly -f conf_single db_replaces find_pkg_dupes trap_exit usage

source /usr/share/makepkg/util.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

unset database db_root queue
while getopts a:d:r:C:D:M:cfNs OPT; do
    case $OPT in
        a) queue=$OPTARG    ;;
        c) chroot=1         ;;
        d) database=$OPTARG ;;
        f) overwrite=1      ;;
        N) no_sync=1        ;;
        r) db_root=$OPTARG  ;;
        s) sign_pkg=1       ;;
        C) chroot_args+=(-C "$OPTARG") ;;
        D) chroot_args+=(-D "$OPTARG") ;;
        M) chroot_args+=(-M "$OPTARG") ;;
        *) usage ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if [[ -v database ]]; then
    server=$(pacconf --single --repo="$database" Server)
    server=${server#*//}
else
    error "$argv0: database: missing argument"
    usage
fi

db_root=$(realpath -e -- "${db_root-$server}")
db_path=$(realpath -e -- "${db_root}/$database.db") # .db symbolic link to archive

if ! [[ -r $db_path && -w $db_path ]]; then
    error "$argv0: $db_path: permission denied"
    exit 13
fi

readonly chroot database server db_root db_path queue overwrite no_sync sign_pkg

if [[ -v queue ]]; then
    exec {fd}< "$queue"
else
    exec {fd}< <(printf '\n')
fi

if (($#)); then
    if ((chroot)); then
        makechrootpkg_args=("$@")
    else
        makepkg_args=("$@")
    fi
fi

if command -v xdelta3 >/dev/null; then
    repo_add_args+=(-d)
fi

mapfile -t db_sigs < <(find "$db_root" -maxdepth 1 -name "$database*.sig" -type f)

if ((sign_pkg)); then
    repo_add_args+=(-v -s)

    if [[ -v GPGKEY ]]; then
        gpg --list-keys "$GPGKEY"
        gpg_args+=(-u "$GPGKEY")
    fi

elif [[ ${db_sigs[*]} ]]; then
    error "$argv0: signature found, but signing is disabled"

    printf -- '%q\n' "${db_sigs[@]}" >&2
    exit 1
fi

tmp=$(mktemp -d "${TMPDIR:-/tmp}/$argv0".XXXXXXXX)
var_tmp=$(mktemp -d "${TMPDIR:-/var/tmp}/$argv0".XXXXXXXX)

readonly chroot_args makepkg_args repo_add_args gpg_args tmp var_tmp
trap 'trap_exit' EXIT
trap 'exit' INT

if ((chroot)); then
    sudo aur build_chroot -d "$database" -u "${chroot_args[@]}"
else
    conf_single "$database" >"$tmp"/custom.conf
fi

while read -r -u "$fd" pkg _; do
    cd_safe "$startdir/$pkg"

    if ((!overwrite)); then
        mapfile -t mark < <(makepkg --packagelist | find_pkg_dupes "$db_root")

        if [[ ${mark[*]} ]]; then
            warning "$argv0: skipping built package (use -f to overwrite)"

            printf -- '%q\n' "${mark[@]}" >&2
            continue
        fi
    fi

    if ((chroot)); then
        sudo PKGDEST="$var_tmp" aur build_chroot \
             "${chroot_args[@]}" -- -d "$db_root" "${makechrootpkg_args[@]}"
    else
        PKGDEST="$var_tmp" makepkg "${makepkg_args[@]}"
    fi

    # fixed by: https://git.archlinux.org/pacman.git/commit/?id=c0a5884b
    find "$startdir/$pkg" -type l -xtype f -lname "$var_tmp*" -delete

    cd_safe "$var_tmp"
    pkglist=(./*)

    if ((sign_pkg)); then
        for p in "${pkglist[@]}"; do
            gpg "${gpg_args[@]}" --output "$p".sig "$p"
            mv -b "$p" "$p".sig -t "$db_root"
        done
    else
        mv -b "${pkglist[@]}" -t "$db_root"
    fi

    cd_safe "$db_root"
    LANG=C repo-add "${repo_add_args[@]}" "$db_path" "${pkglist[@]}"

    if ((chroot)) || ((no_sync)); then
        continue
    else
        replaces=$(grep -Fxf <(db_replaces "$db_path") <(pacman -Qq) | paste -s -d, -)

        sudo pacman -Fy  --config="$tmp"/custom.conf
        sudo pacman -Syu --config="$tmp"/custom.conf --ignore="$replaces" --noconfirm
    fi
done

exec {fd}<&-

# vim: set et sw=4 sts=4 ft=sh:
