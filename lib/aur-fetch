#!/bin/bash
# aur-fetch - retrieve build files from the AUR
readonly argv0=fetch
readonly AUR_LOCATION=${AUR_LOCATION:-https://aur.archlinux.org}
readonly XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[1]}(): }'

# default options
verbose=0 recurse=0

usage() {
    cat <<! | base64 -d
ICAgICAgICAgICAgIC4tLX5+LF9fCjotLi4uLiwtLS0tLS0tYH5+Jy5fLicKIGAtLCwsICAs
XyAgICAgIDsnflUnCiAgXywtJyAsJ2AtX187ICctLS4KIChfLyd+fiAgICAgICcnJycoOwoK
!
    printf 'usage: fetch [-l directory] [-rv] pkgname...\n'
}

source /usr/share/makepkg/util/parseopts.sh

opt_short='rvl:'
opt_long=('recurse' 'verbose' 'write_log:')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage >&2; exit 1;
fi
set -- "${OPTRET[@]}"

unset log_dir
while true; do
    case $1 in
        -r|--recurse)   recurse=1 ;;
        -v|--verbose)   verbose=1 ;;
        -l|--write_log) shift; log_dir=$1 ;;
        --dump-options) printf -- '--%s\n' "${opt_long[@]}" ;
                        printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g' ;
                        exit ;;
        --) shift; break ;;
    esac
done

if [[ -v $log_dir ]] && [[ ! -d $log_dir ]]; then
    printf 'fetch: %s: Not a directory\n' "$log_dir" >&2
    exit 1
fi

if ! (( $# )); then
    printf 'fetch: No pkgname given\n' >&2
    exit 1
fi

# Prepare configuration directory.
mkdir -p "$XDG_CONFIG_HOME"/aurutils/$argv0

# Default to showing PKGBUILD first in patch. (#399)
orderfile=$XDG_CONFIG_HOME/aurutils/$argv0/orderfile

if [[ ! -s $orderfile ]]; then
    printf 'PKGBUILD\n' > "$orderfile"
fi

if (( recurse )); then
    aur depends --pkgbase "$@"
else
   printf '%s\n' "$@"
fi | while read -r pkg; do
    if [[ -d $pkg/.git ]]; then
        # Avoid issues with filesystem boundaries. (#274)
        export GIT_DIR=$pkg GIT_WORK_TREE=$pkg/.git
        git fetch --verbose

        if [[ $(git rev-parse HEAD) != $(git rev-parse '@{upstream}') ]]; then
            # Only print log on upstream changes.
            if (( verbose )); then
                git --no-pager log --patch --stat '..@{upstream}'
            fi

            if [[ $log_dir ]]; then
                git --no-pager log --patch --stat '..@{upstream}' > "$log_dir"/"$GIT_DIR".patch
                printf '%s/%s.patch\n' "$log_dir" "$GIT_DIR"
            fi

            # Discard any local changes. (#349)
            git reset --hard 'HEAD@{upstream}' >&2
        fi
    else
        if ! git clone -c diff.orderFile="$orderfile" "$AUR_LOCATION"/"$pkg".git; then
            printf 'fetch: %s: Failed to clone repository\n' "$pkg" >&2
            exit 1
        fi
    fi
done

# vim: set et sw=4 sts=4 ft=sh:
