#!/bin/bash
set -e

tmp0=$(mktemp)
tmp1=$(mktemp -d)
tmp1_uid=custom-$RANDOM-1
tmp2=$(mktemp -d)
tmp2_uid=custom-$RANDOM-2
tmp3=$(mktemp -d)
tmp3_uid=custom-$RANDOM-3
trap 'rm -rf -- "$tmp0" "$tmp1" "$tmp2" "$tmp3"' EXIT

cat >"$tmp1"/pacman.conf <<EOF
[options]
HoldPkg = pacman-git glibc
Architecture = auto
CheckSpace
[core]
Include = /etc/pacman.d/mirrorlist
[extra]
Include = /etc/pacman.d/mirrorlist
[community]
Include = /etc/pacman.d/mirrorlist
[$tmp1_uid]
SigLevel = Optional TrustAll
Server = file://$tmp1
[$tmp2_uid]
SigLevel = Optional TrustAll
Server = file://$tmp2
[$tmp3_uid]
SigLevel = Optional TrustAll
Server = file://$tmp3
EOF

# create local repository
repo-add "$tmp1/$tmp1_uid".db.tar
repo-add "$tmp2/$tmp2_uid".db.tar
repo-add "$tmp3/$tmp3_uid".db.tar

# create pacman wrapper for makepkg -s operations
{ printf '#!/bin/sh --\n'
  printf 'pacman --config "%s" "$@"\n' "$tmp0"/pacman.conf
} >"$tmp0"/pacman
chmod +x "$tmp0"/pacman

# issue 378: repository selection with AUR_REPO
sync_args=(-rn --no-view aurutils --config "$tmp0"/pacman.conf)

AUR_REPO="$tmp_uid1" PACMAN="$tmp0"/pacman aur sync "${sync_args[@]}"
"$tmp0"/pacman -Si "$tmp1_uid"/aurutils
AUR_REPO="$tmp_uid2" PACMAN="$tmp0"/pacman aur sync "${sync_args[@]}"
"$tmp0"/pacman -Si "$tmp2_uid"/aurutils
AUR_REPO="$tmp_uid3" PACMAN="$tmp0"/pacman aur sync "${sync_args[@]}"
"$tmp0"/pacman -Si "$tmp3_uid"/aurutils
