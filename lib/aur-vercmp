#!/bin/bash
# aur-vercmp - check packages for AUR updates
set -o pipefail
readonly argv0=vercmp
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default options
format=all

cmp() {
    local pkg v_cmp v_in op

    while read -r pkg v_cmp v_in; do
        case $v_in in
            -) op=2 ;; # - on field 3
            *) op=$(my_vercmp "$v_in" "$v_cmp") ;;
        esac

        case $format in
            equal)
                case $op in
                   -1) plain "$pkg: $v_cmp is newer than $v_in"
                       printf '%s\n' "$pkg"      ;;
                    0) printf '%s\n' "$pkg"      ;;
                    1) msg2 "$pkg: $v_cmp -> $v_in" ;;
                    2) msg2 "$pkg: (none) -> $v_in" ;;
                esac ;;
            all)
                case $op in
                   -1) printf '%s: %s -> %s\n' "$pkg" "$v_in" "$v_cmp" ;;
                    0) printf '%s: %s = %s\n'  "$pkg" "$v_in" "$v_cmp" ;;
                    1) printf '%s: %s <- %s\n' "$pkg" "$v_in" "$v_cmp" ;;
                    2) printf '%s: (none) -> %s\n' "$pkg" "$v_cmp"     ;;
                esac
            esac
    done
}

my_vercmp() {
    if [[ $1 == "$2" ]]; then
        printf '%d' 0 # common case
    else
        vercmp "$1" "$2"
    fi
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    plain "usage: $argv0 [-ac] file1 file2"
    exit 1
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

opt_short='acu:'
opt_long=()
if ! parseopts "$opt_short" "${opt_long[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset all aux repo upair
while true; do
    case "$1" in
        -a) all=1 ;;
        -c) format='equal' ;;
        -u) shift; upair=$1 ;;
        --) shift; break ;;
    esac
    shift
done
unset opt_short opt_long OPTRET

tmp=$(mktemp) || exit
trap 'trap_exit' EXIT

upair=${upair-2} ;; # join unpaired of target

# pipeline
join -a "$upair" -e - -o 0,1.2,2.2 <(sort -k 1b,1 "$file1") <(sort -k 1b,1 "$file2") | cmp

# vim: set et sw=4 sts=4 ft=sh:
