#!/bin/bash
# aur-fetch - retrieve build files from the AUR
[[ -v AUR_DEBUG ]] && set -o xtrace
argv0=fetch
AUR_LOCATION=${AUR_LOCATION:-https://aur.archlinux.org}
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[1]}(): }'

# default arguments
pull_args=('--verbose')
diff_args=('--patch' '--stat')

# default options
verbose=0 recurse=0 confirm_seen=0 rebase=-1 results=0 log_fmt=diff
n_procs=$(nproc)

# empty tree object
git_empty_tree=$(git hash-object -t tree /dev/null)

trap_exit() {
    # Do not remove error files if an error occured (#593)
    if [[ ! -v AUR_DEBUG ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    cat <<! | base64 -d
ICAgICAgICAgICAgIC4tLX5+LF9fCjotLi4uLiwtLS0tLS0tYH5+Jy5fLicKIGAtLCwsICAs
XyAgICAgIDsnflUnCiAgXywtJyAsJ2AtX187ICctLS4KIChfLyd+fiAgICAgICcnJycoOwoK
!
    plain >&2 'usage: %s [-L directory] [-Rrv] pkgname...' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ ! -v NO_COLOR ]] && [[ ! -v AUR_DEBUG ]]; then
    if [[ -t 2 ]]; then
        colorize; diff_args+=('--color')
    fi
fi

opt_short='rRvL:'
opt_long=('recurse' 'verbose' 'write-log:' 'confirm-seen'
          'rebase' 'reset' 'results:' 'format:' 'jobs:')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset log_dir
while true; do
    case "$1" in
        -L|--write-log)
            shift; log_dir=$1 ;;
        -r|--recurse)
            recurse=1 ;;
        -v|--verbose)
            verbose=1 ;;
        --format)
            shift; log_fmt=$1 ;;
        --jobs)
            shift
            n_procs=$1 ;;
        -R|--rebase)
            rebase=1 ;;
        --reset)
            rebase=0 ;;
        --confirm-seen)
            confirm_seen=1 ;;
        --results)
            results_file=$1 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}"
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

if ! [[ $log_fmt =~ ^(log|diff)$ ]]; then
    error '%s: %s format is not supported' "$argv0" "$log_fmt" && exit 1
fi

if [[ -v $log_dir ]] && [[ ! -d $log_dir ]]; then
    error '%s: %s: Not a directory' "$argv0" "$log_dir"
    exit 20
fi

if [[ -v results_file && -w $results_file ]]; then
    : >"$results_file" # truncate file
    results=1
elif [[ -v results_file ]]; then
    error '%s: %s: permission denied' "$argv0" "$results_file"
    exit 13
fi

if ! (( $# )); then
    error '%s: No pkgname given' "$argv0"
    exit 1
fi

# Default to showing PKGBUILD first in patch. (#399)
mkdir -p "$XDG_CONFIG_HOME/aurutils/$argv0"
orderfile=$XDG_CONFIG_HOME/aurutils/$argv0/orderfile

if [[ ! -s $orderfile ]]; then
    printf 'PKGBUILD\n' > "$orderfile"
fi

if (( confirm_seen )); then
    msg "Marking repositories as seen"
fi

tmp=$(mktemp -d --tmpdir "aurutils-$argv0.XXXXXXXX") || exit
trap 'trap_exit' EXIT


aur_fetch_job() {
    pkg=$1
    # Avoid issues with filesystem boundaries. (#274)
    export GIT_DIR=$pkg/.git GIT_WORK_TREE=$pkg

    # Reset/rebase if we're on valid repo
    if git rev-parse --git-dir 2>/dev/null; then
        if (( confirm_seen )); then
            git update-ref AUR_SEEN HEAD

            msg2 'Marked repository %s as seen' "$pkg"
            exit 0 # skip diff logic
        fi

        if (( rebase > 0 )) || {
               (( rebase < 0 )) && [[ $(git config --get --bool aurutils.rebase) == "true" ]]
           }; then
            git reset --hard HEAD >&2

            if ! git pull --rebase "${pull_args[@]}"; then
                error '%s: %s: Failed to integrate changes' "$argv0" "$pkg"
                exit 1
            fi
        else
            git fetch -v >&2
            git reset --hard 'HEAD@{upstream}' >&2
        fi

        if ! seen=$(git rev-parse --quiet --verify AUR_SEEN); then
            warning '%s: AUR_SEEN object not found, assuming empty tree' "$argv0"
            seen=$git_empty_tree
        fi

        if [[ $seen != "$(git rev-parse HEAD)" ]]; then
            range=${seen:+$seen..}HEAD

            # Contents have changed since last inspection; print differences.
            if (( verbose )); then
                git --no-pager "$log_fmt" "${diff_args[@]}" "$range"
            fi

            if [[ $log_dir ]]; then
                git --no-pager "$log_fmt" "${diff_args[@]}" "$range" >"$log_dir/$pkg.$log_fmt"
            fi
        fi

        if (( results )); then
            printf 'fetch:file://%s\n' "$PWD/$pkg" | tee -a "$results_file"
        fi
    # Otherwise, try to clone anew
    elif git clone "$AUR_LOCATION/$pkg".git "$GIT_DIR"; then
        if (( confirm_seen )); then
            git update-ref AUR_SEEN HEAD

            msg2 'Marked new repository %s as seen' "$pkg"
        fi

        # Show PKGBUILDs first. (#399)
        git config diff.orderFile "$orderfile"

        if (( results )); then
            printf 'clone:file://%s\n' "$PWD/$pkg" | tee -a "$results_file"
        fi
    else
        error '%s: %s: Failed to clone repository' "$argv0" "$pkg"
    fi
}


if (( recurse )); then
    aur depends --pkgbase "$@"
else
    printf '%s\n' "$@"
fi >"$tmp/queue"

i=0 # "allocate" slots
while (( i++ < n_procs )); do true & done

# run jobs. We need to go through the loop n_proc more times to
# to ensure we read exit codes from processes that are still running
# when the queue finishes.
while { read -r pkg || (( --i > 0 )); } ; do
    wait -n || { ret=$?; break; }               #simulate fail=1 from now,fail=1
    if [[ $pkg ]]; then
        aur_fetch_job "$pkg" >"$tmp/$pkg.out" 2>"$tmp/$pkg.err" &
    fi
done < <(sort -u "$tmp/queue" | sed '/^$/d')

if (( ret )); then # simulate now from now,fail=1
    # shellcheck disable=SC2046
    kill $(jobs -np)
fi

wait # wait for process to terminate
cat "$tmp/"*.out
cat "$tmp/"*.err >&2
exit $ret
# vim: set et sw=4 sts=4 ft=sh:
