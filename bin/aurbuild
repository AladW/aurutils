#!/bin/bash
readonly argv0=aurbuild
readonly basedir=$PWD
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e

declare -a gpg_args=(--detach-sign --no-armor --verbose --batch)
declare -a makechrootpkg_args=(-cnu) makepkg_args=(-Lcrs) repo_add_args=()
declare -i chroot=0 sign_pkg=0 force=0 no_sync=0

conf_section() {
    printf '[%s]\n' "$1"
    pacconf --raw "${@:2}"
}

conf_devtools() {
    conf_section options --config=/usr/share/devtools/"$1" --options
    printf '#CacheDir=\n'

    pacconf --repo-list | while IFS= read -r; do
        conf_section "$REPLY" --repo="$REPLY"
    done
}

conf_local() {
    conf_section options --options
    conf_section "$1" --repo="$1"
}

db_replaces() {
    bsdcat "$1" | awk '/%REPLACES%/ {
        while(NF != 0) {getline; print}
    }'
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp" "$var_tmp"
    fi
}

usage() {
    plain "usage: $argv0 -d database [-cfNs] [-a queue] [-r root] [-C container] [--] <makepkg args>"
    exit 1
}

readonly -f conf_section conf_devtools conf_local db_replaces trap_exit usage

source /usr/share/makepkg/util.sh

if [[ -t 2 ]]; then
    colorize
fi

unset queue container database root
while getopts a:cC:d:fNr:s OPT; do
    case $OPT in
        a) queue=$OPTARG      ;;
        c) chroot=1           ;;
        C) container=$OPTARG  ;;
        d) database=$OPTARG   ;;
        f) force=1            ;;
        N) no_sync=1          ;;
        r) root=$OPTARG       ;;
        s) sign_pkg=1         ;;
        *) usage              ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

machine=$(uname -m)
tmp=$(mktemp -d "${TMPDIR:-/tmp}/$argv0".XXXXXXXX)
var_tmp=$(mktemp -d "${TMPDIR:-/var/tmp}/$argv0".XXXXXXXX)

readonly machine tmp var_tmp
trap 'trap_exit' EXIT
trap 'exit' INT

# Reset option array if arguments are specified after --
if (($#)); then
    if ((chroot)); then
        makechrootpkg_args=("$@")
    else
        makepkg_args=("$@")
    fi
fi

if type -P xdelta3 >/dev/null; then
    repo_add_args+=(-d)
fi

if ((sign_pkg)); then
    repo_add_args+=(-vs)
fi

if [[ -v GPGKEY ]] && gpg --list-keys "$GPGKEY"; then
    gpg_args+=(-u "$GPGKEY")
fi

if [[ -v queue ]]; then
    if [[ -r $queue && ! -d $queue ]]; then
        exec {fd}< "$queue"
    else
        error "$argv0: queue: must be a readable file"
        exit 13
    fi
else
    # http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11
    exec {fd}<<< '//'
fi

if [[ -v database ]]; then
    server=$(pacconf --single --repo="$database" Server)
    server=${server#*://}
else
    error "$argv0: database: missing argument"
    usage
fi

root=$(canonicalize_path "${root-$server}")

if [[ -w $root/ && -r $root/ ]]; then
    # File: custom.db -> custom.db.tar
    db_path=$(readlink -f "$root/$database".db)
else
    error "$argv0: $root: permission denied"
    exit 13
fi

if ((chroot)); then
    readonly container=${container-/var/lib/aurbuild}/$machine
    readonly makepkg_conf=/usr/share/devtools/makepkg-$machine.conf

    conf_devtools pacman-extra.conf > "$tmp"/pacman.conf

    if [[ -f $container/root/.arch-chroot ]]; then
        sudo arch-nspawn -C "$tmp"/pacman.conf -M "$makepkg_conf" \
            "$container"/root pacman -Syu --noconfirm
    else
        sudo install -d "$container" -m 755 -v
        sudo mkarchroot  -C "$tmp"/pacman.conf -M "$makepkg_conf" \
            "$container"/root base-devel
    fi

    # Check if target repository is configured in chroot (#161)
    pacconf --root="$container"/root --repo="$database" >/dev/null
else
    conf_local "$database" > "$tmp"/custom.conf
fi

while read -r -u "$fd" pkg _; do
    cd_safe "$basedir/$pkg"

    if ((!force)); then
        while IFS= read -d $'\0' -r; do
            error "A package has already been built: $(printf '%q' "$REPLY") (use -f to ignore)"
            exit 17
        done < <(makepkg --packagelist | xargs -I{} find "$root" -name '{}*' -print0)
    fi

    if ((chroot)); then
        sudo PKGDEST="$var_tmp" makechrootpkg \
            -d "$root" -r "$container" "${makechrootpkg_args[@]}"
    else
        PKGDEST="$var_tmp" LC_MESSAGES=C makepkg "${makepkg_args[@]}"
    fi

    pkglist=("$var_tmp"/*)

    for pkg in "${pkglist[@]}"; do
        if ((sign_pkg)); then
            gpg "${gpg_args[@]}" "$pkg" --output "$pkg".sig
            mv -b "$pkg" "$pkg".sig -t "$root"
        else
            mv -b "$pkg" -t "$root"
        fi
    done

    LANG=C repo-add "${repo_add_args[@]}" -- "$db_path" "${pkglist[@]}"

    if ((chroot)) || ((no_sync)); then
        continue
    else
        replaces=$(grep -Fxf <(db_replaces "$db_path") <(pacman -Qq) | paste -s -d, -)

        sudo pacman -Fy  --config="$tmp"/custom.conf
        sudo pacman -Syu --config="$tmp"/custom.conf --ignore="$replaces" --noconfirm
    fi
done

exec {fd}<&-

# vim: set et sw=4 sts=4 ft=sh:
