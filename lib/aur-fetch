#!/bin/bash
# aur-fetch - retrieve build files from the AUR
[[ -v AUR_DEBUG ]] && set -o xtrace
argv0=fetch
AUR_LOCATION=${AUR_LOCATION:-https://aur.archlinux.org}
XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[1]}(): }'

# default arguments
pull_args=('--verbose')
diff_args=('--patch' '--stat')

# default options
verbose=0 recurse=0 confirm_seen=0 results=0 sync=no log_fmt=diff

usage() {
    cat <<! | base64 -d
ICAgICAgICAgICAgIC4tLX5+LF9fCjotLi4uLiwtLS0tLS0tYH5+Jy5fLicKIGAtLCwsICAs
XyAgICAgIDsnflUnCiAgXywtJyAsJ2AtX187ICctLS4KIChfLyd+fiAgICAgICcnJycoOwoK
!
    plain >&2 'usage: %s [-L directory] [-Rrv] pkgname...' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ ! -v NO_COLOR ]] && [[ ! -v AUR_DEBUG ]]; then
    [[ -t 2 ]] && colorize
fi

opt_short='rvL:S'
opt_long=('recurse' 'verbose' 'write-log:' 'confirm-seen' 'sync:' 'results:' 'format:')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset log_dir results_file
while true; do
    case "$1" in
        -L|--write-log)
            shift; log_dir=$1 ;;
        -r|--recurse)
            recurse=1 ;;
        -v|--verbose)
            verbose=1 ;;
        -S)
            sync=auto ;;
        --sync)
            shift
            case $1 in
                auto|reset|rebase|no)
                    sync=$1 ;;
                *)
                    error '%s: Invalid --sync option: %s' "$argv0" "$1"
                    usage ;;
            esac ;;
        --format)
            shift
            case $1 in
                diff|log)
                    log_fmt=$1 ;;
                *)
                    error '%s: Invalid --format option: %s' "$argv0" "$1"
                    usage ;;
            esac ;;
        --confirm-seen)
            confirm_seen=1 ;;
        --results)
            shift; results_file=$1 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}"
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

if [[ -v log_dir ]] && [[ ! -d $log_dir ]]; then
    error '%s: %s: Not a directory' "$argv0" "$log_dir"
    exit 20
fi

if [[ -v results_file ]]; then
    : >"$results_file" # truncate file
    results=1
fi

if ! (( $# )); then
    error '%s: No pkgname given' "$argv0"
    exit 1
fi

# Default to showing PKGBUILD first in patch. (#399)
mkdir -p "$XDG_CONFIG_HOME/aurutils/$argv0"
orderfile=$XDG_CONFIG_HOME/aurutils/$argv0/orderfile

if [[ ! -s $orderfile ]]; then
    printf 'PKGBUILD\n' > "$orderfile"
fi

if (( confirm_seen )); then
    msg >&2 "Marking repositories as seen"
fi

if (( recurse )); then
    aur depends --pkgbase "$@"
else
   printf '%s\n' "$@"
fi | while read -r pkg; do
    # Avoid issues with filesystem boundaries. (#274)
    export GIT_DIR=$pkg/.git GIT_WORK_TREE=$pkg

    # Reset/rebase if we are on valid repo
    if [[ -d $pkg ]] && git rev-parse --git-dir >/dev/null; then
        if (( confirm_seen )); then
            git update-ref AUR_SEEN HEAD

            msg2 >&2 'Marked repository %s as seen' "$pkg"
            continue # skip diff logic
        fi

        git fetch --verbose >&2 || exit 1

        case $sync in
            auto)
                if [[ $(git config --get --bool aurutils.rebase) == "true" ]]; then
                    plain >&2 'aurutils.rebase is set for %s' "$pkg"
                    sync=rebase
                else
                    sync=reset
                fi ;;
        esac

        case $sync in
            rebase)
                git reset --hard 'HEAD' >&2
                git rebase "${pull_args[@]}" >&2 ;;
            reset)
                git reset --hard 'HEAD@{upstream}' >&2 ;;
        esac || {
            error '%s: %s: Failed to integrate changes' "$argv0" "$pkg"
            exit 1
        }

        if ! seen=$(git rev-parse --quiet --verify AUR_SEEN); then
            warning '%s: AUR_SEEN object not found for %s, assuming empty tree' "$argv0" "$pkg"
            seen=$(git hash-object -t tree /dev/null)
        fi

        if [[ $seen != "$(git rev-parse HEAD)" ]]; then
            range=${seen:+$seen..}HEAD

            # Contents have changed since last inspection; print differences.
            if (( verbose )); then
                git --no-pager "$log_fmt" "${diff_args[@]}" "$range"
            fi

            if [[ $log_dir ]]; then
                git --no-pager "$log_fmt" "${diff_args[@]}" "$range" >"$log_dir/$pkg.$log_fmt"
            fi
        fi

        if (( results )); then
            printf 'fetch:file://%s\n' "$PWD/$pkg" | tee -a "$results_file"
        fi

    elif [[ -d $pkg ]]; then
        error '%s: %s is not a valid git repository' "$argv0" "$pkg"
        exit 22

    # Otherwise, try to clone anew
    elif git clone "$AUR_LOCATION/$pkg" "$GIT_DIR"; then
        if (( confirm_seen )); then
            git update-ref AUR_SEEN HEAD
            msg2 >&2 'Marked new repository %s as seen' "$pkg"
        fi

        # Show PKGBUILDs first. (#399)
        git config diff.orderFile "$orderfile"

        if (( results )); then
            printf 'clone:file://%s\n' "$PWD/$pkg" | tee -a "$results_file"
        fi
    else
        error '%s: %s: Failed to clone repository' "$argv0" "$pkg"
        exit 1
    fi
done

# vim: set et sw=4 sts=4 ft=sh:
