#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e -o pipefail

readonly argv0=repofind
readonly aurweb=https://aur.archlinux.org

repofind() {
    declare repo
    declare -A rset

    for repo in $(pacconf --repo-list); do
	rset[$repo]=$(pacconf --single --repo="$repo" Server)

	if [[ ${rset[$repo]} =~ file:// ]]; then
	    printf '%s %s\n' "$repo" "${rset[$repo]}"
	fi
    done
}

reposelect() {
    declare repo server pool
    declare -A avail
    
    while read -r repo server; do
	avail[$repo]=$server
    done < <(repofind)

    if ((${#avail[@]} > 1)); then
        select repo in "${!avail[@]}"; do
	    break
	done
    elif [[ ${avail[@]} ]]; then
        repo=${!avail[*]}
    else
	error "No file:// repository found"
        exit 2
    fi

    pool=${avail[$repo]#file://}

    if [[ ! -d $pool ]]; then
        error "$pool: Not a directory"
        exit 20
    fi

    if [[ ! -w $pool ]]; then
        error "$pool: Permission denied"
        exit 13
    fi

    msg2 "Using [$repo] repository"
    printf '%s %s\n' "$repo" "$pool"
}

namever() {
    jshon -a -e results -a -e Name -u -p -e Version -u | xargs -n2
}

quickcheck() {
    declare pkg ver
    declare -A set_l set_r

    # Check if the repo is configured.
    pacconf --repo="$1" >/dev/null

    # If stdin is empty, expac -S lists all sync db packages.
    while read -r pkg ver; do
	set_l[$pkg]=$ver
    done < <(pacsift --exact --repo="$1" <&- | xargs -r expac -S '%n %v')

    # Get remote versions from aursearch JSON output.
    if [[ ${set_l[@]} ]]; then
	while read -r pkg ver; do
	    set_r[$pkg]=$ver
	done < <(aursearch -Fr "${!set_l[@]}" | namever)
    else
	error "No data available"
	exit 61
    fi

    for pkg in "${!set_r[@]}"; do
	if (($(vercmp "${set_r[$pkg]}" "${set_l[$pkg]}") == 1)); then
	    printf '%s\n' "$pkg ${set_l[$pkg]} -> ${set_r[$pkg]}"
	fi
    done
}

source /usr/share/makepkg/util.sh

[[ -t 2 ]] && colorize

while getopts :isu: OPT; do
    case $OPT in
	i|+i) repofind   ;;
	s|+s) reposelect ;;
	u|+u) quickcheck "$OPTARG" ;;	    
	*)    plain "usage: $argv0 [+-isu ARG} [--] ARGS..."
	      exit 1 ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1
