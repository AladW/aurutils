#!/bin/bash
# aur-fetch - retrieve build files from the AUR
readonly argv0=fetch
readonly AUR_LOCATION=${AUR_LOCATION:-https://aur.archlinux.org}
readonly XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[1]}(): }'
readonly AUR_COLOR=${AUR_COLOR-auto}

# default options
verbose=0 recurse=0 confirm_seen=0 pull_args=('--verbose')

gen_patchfile() {
    git diff-tree --patch --stat "${2:-$(git hash-object -t tree /dev/null)}" "$1"
}

usage() {
    cat <<! | base64 -d
ICAgICAgICAgICAgIC4tLX5+LF9fCjotLi4uLiwtLS0tLS0tYH5+Jy5fLicKIGAtLCwsICAs
XyAgICAgIDsnflUnCiAgXywtJyAsJ2AtX187ICctLS4KIChfLyd+fiAgICAgICcnJycoOwoK
!
    plain 'usage: %s [-L directory] [-frv] pkgname...' "$argv0" >&2
    exit 1
}

source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ ( -t 1 && -t 2 && ! -o xtrace && $AUR_COLOR == auto ) || $AUR_COLOR == always ]] ; then
    colorize
fi

opt_short='frvL:'
opt_long=('recurse' 'verbose' 'write-log:' 'force' 'confirm-seen')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset log_dir
while true; do
    case "$1" in
        -L|--write-log) shift; log_dir=$1 ;;
        -r|--recurse)   recurse=1 ;;
        -v|--verbose)   verbose=1 ;;
        -f|--force)     pull_args+=('--force') ;;
        --confirm-seen) confirm_seen=1 ;;
        --dump-options) printf -- '--%s\n' "${opt_long[@]}" ;
                        printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g' ;
                        exit ;;
        --) shift; break ;;
    esac
    shift
done

if [[ -v $log_dir ]] && [[ ! -d $log_dir ]]; then
    error '%s: %s: Not a directory' "$argv0" "$log_dir"
    exit 20
fi

if ! (( $# )); then
    error '%s: No pkgname given' "$argv0"
    exit 1
fi

mkdir -p "$XDG_CONFIG_HOME"/aurutils/$argv0

# Default to showing PKGBUILD first in patch. (#399)
orderfile=$XDG_CONFIG_HOME/aurutils/$argv0/orderfile

if [[ ! -s $orderfile ]]; then
    printf 'PKGBUILD\n' >"$orderfile"
fi

if (( confirm_seen )); then
    msg "Marking repositories as seen"
fi

if (( recurse )); then
    aur depends --pkgbase "$@"
else
    printf '%s\n' "$@"
fi | while read -r pkg; do
    if [[ -d $pkg/.git ]]; then
        # Avoid issues with filesystem boundaries. (#274)
        export GIT_DIR=$pkg/.git GIT_WORK_TREE=$pkg

        if (( confirm_seen )); then
            git update-ref AURUTILS_SEEN HEAD

            msg2 'Marked %s as seen' "$pkg"
            continue
        fi

        # Preserve committed modifications to packages. (#552)
        git reset --hard HEAD >&2

        if ! git pull --rebase "${pull_args[@]}"; then
            error '%s: Failed to integrate changes.' "$pkg"
            exit 1
        fi

        # Generate logs since "last seen" marker. (#552)
        seen=$(git rev-parse --quiet --verify AURUTILS_SEEN)

        if [[ "$seen" != $(git rev-parse HEAD) ]]; then
            log_range=(HEAD ${seen:+^$seen})

            if (( verbose )); then
                gen_patchfile "${log_range[@]}"
            fi

            if [[ $log_dir ]]; then
                logfile=$log_dir/$pkg.diff

                gen_patchfile "${log_range[@]}" >"$logfile"
                plain '%s' "$logfile"
            fi
        fi
    else
        if git clone "$AUR_LOCATION/$pkg".git; then
            if (( confirm_seen )); then
                warning 'fetch: --confirm-seen for %s ignored on first clone' "$pkg"
            fi

            # Set diff order for new repositories. (#548)
            git -C "$pkg" config diff.orderFile "$orderfile"

            # Only allow fast-forward fetches. (#552)
            git -C "$pkg" config remote.origin.fetch 'refs/heads/*:refs/remotes/origin/*'
        else
            error '%s: %s: Failed to clone repository' "$argv0" "$pkg"
            exit 1
        fi
    fi
done

# vim: set et sw=4 sts=4 ft=sh:
