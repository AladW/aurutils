#!/bin/bash
# aur-query - interface with AurJson
[[ -v AUR_DEBUG ]] && set -o xtrace
argv0=query
AUR_LOCATION=${AUR_LOCATION:-'https://aur.archlinux.org'}
PS4='+(${BASH_SOURCE}:${LINENO}):${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

uri_info() {
    #global rpc_url
    awk -v rpc="$rpc_url&type=info" '{
        if (NR == 1)
            printf "%s&arg[]=%s", rpc, $0
        else if (NR % 150 == 0)
            printf "\n%s&arg[]=%s", rpc, $0
        else if (NR > 1)
            printf "&arg[]=%s", $0
    } END {
        if (NR != 0)
            printf "\n"
    }'
}

uri_search() {
    #global rpc_url
    awk -v rpc="$rpc_url&type=search&by=$1&arg" '{
        printf "%s=%s\n", rpc, $0
    }'
}

usage() {
    printf 'usage: %s [-t [info|search] ] [-b by]\n' "$argv0" >&2
    exit 1
}

source /usr/share/makepkg/util/parseopts.sh

opt_short='b:t:'
opt_long=('by:' 'type:' 'rpc-ver:' 'rpc-url:')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset arg_by arg_type rpc_url rpc_ver
while true; do
    case "$1" in
        -b|--by)
            shift; arg_by=$1 ;;
        -t|--type)
            shift; arg_type=$1 ;;
        --rpc-ver)
            shift; rpc_ver=$1 ;;
        --rpc-url)
            shift; rpc_url=$1 ;;
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}" ${AUR_DEBUG+"${opt_hidden[@]}"}
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

# set AUR remote
rpc_ver=${rpc_ver:-5}
rpc_url=${rpc_url:-$AUR_LOCATION/rpc/?v=$rpc_ver}

# set filters
case $arg_type in
      info) uri() { uri_info; } ;;
    search) uri() { uri_search "${arg_by:-name-desc}"; } ;;
         *) usage ;;
esac

# check for interactive terminal
if [[ -t 0 ]]; then
    cat >&2 <<EOF
Warning: Input is read from the terminal. You either know what you
Warning: are doing, or you forgot to pipe data into $argv0.
Warning: Press CTRL-D to exit.
EOF
fi

# pipeline
readarray -t urls < <(jq -R -r '@uri' | uri )
if (( ${#urls[@]} )); then
    printf 'url %s\n' "${urls[@]}" | curl -K- -fgLsS
fi

# vim: set et sw=4 sts=4 ft=sh:
