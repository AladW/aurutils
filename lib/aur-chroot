#!/bin/bash
# aur-chroot - build packages with systemd-nspawn
[[ -v AUR_DEBUG ]] && set -o xtrace
set -o errexit
argv0=chroot
PATH=/bin:/usr/bin
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
machine=$(uname -m)
startdir=$(pwd -P)

# default arguments
directory=/var/lib/aurbuild/$machine
makechrootpkg_args=(-c) # sync /root container to /$USER copy
makepkg_conf=/usr/share/devtools/makepkg-$machine.conf
prefix=extra

# default options
update=0 build=0 packagelist=0

usage() {
    printf >&2 'usage: %s [-BU] [-CDM path] -- <makechrootpkg args>\n' "$argv0"
    exit 1
}

source /usr/share/makepkg/util/config.sh
source /usr/share/makepkg/util/option.sh
source /usr/share/makepkg/util/pkgbuild.sh
source /usr/share/makepkg/util/parseopts.sh

opt_short='C:D:M:BU'
opt_long=('directory:' 'pacman-conf:' 'makepkg-conf:' 'build' 'update'
          'prefix:' 'bind:' 'bind-rw:' 'packagelist' 'buildscript:')
opt_hidden=('dump-options')

if ! parseopts "$opt_short" "${opt_long[@]}" "${opt_hidden[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset bindmounts_ro bindmounts_rw buildscript pacman_conf
while true; do
    case "$1" in
        -B|--build)
            build=1 ;;
        -U|--update)
            update=1 ;;
        --buildscript)
            shift; buildscript=$1 ;;
        --packagelist)
            packagelist=1 ;;
        --prefix)
            shift; prefix=$1 ;;
        # arch-nspawn options
        -C|--pacman-conf)
            shift; pacman_conf=$1 ;;
        -D|--directory)
            shift; directory=$1 ;;
        -M|--makepkg-conf)
            shift; makepkg_conf=$1 ;;
        # makechrootpkg options
        --bind)
            shift; bindmounts_ro+=("$1") ;;
        --bind-rw)
            shift; bindmounts_rw+=("$1") ;;
        # other options
        --dump-options)
            printf -- '--%s\n' "${opt_long[@]}" ${AUR_DEBUG+"${opt_hidden[@]}"}
            printf -- '%s' "${opt_short}" | sed 's/.:\?/-&\n/g'
            exit ;;
        --) shift; break ;;
    esac
    shift
done

# Reset makechrootpkg command-line if specified
if (( $# )); then
    makechrootpkg_args=("$@")
fi

# base container configuration
case $prefix in
    multilib*)
        base_packages=('multilib-devel') ;;
    *)
        base_packages=('base-devel') ;;
esac
pacman_conf=${pacman_conf:-/usr/share/devtools/pacman-$prefix.conf}

if [[ ! -r $pacman_conf ]]; then
    printf >&2 '%s: config file %q could not be read\n' "$argv0" "$pacman_conf"
    exit 1
elif [[ ! -r $makepkg_conf ]]; then
    printf >&2 '%s: config file %q could not be read\n' "$argv0" "$makepkg_conf"
    exit 1
fi

# bind mount file:// paths to container (#461)
while read -r key _ value; do
    case $key=$value in
        Server=file://*)
            bindmounts_rw+=("${value#file://}") ;;
    esac
done < <(pacman-conf --config "$pacman_conf")

if (( packagelist )); then
    ( load_makepkg_config "$makepkg_conf"
      source_safe "${buildscript-PKGBUILD}"

      PKGDEST="${PKGDEST:-$startdir}" print_all_package_names
    )
    exit $?
fi

if (( update )); then
    # parent path is not created by mkarchroot (#371)
    if [[ ! -d $directory ]]; then
        sudo install -d "$directory" -m 755 -v
    fi

    if [[ ! -d $directory/root ]]; then
        sudo mkarchroot -C "$pacman_conf" -M "$makepkg_conf" \
             "$directory"/root "${base_packages[@]}"
    fi

    # locking is done by systemd-nspawn
    sudo arch-nspawn -C "$pacman_conf" -M "$makepkg_conf" "$directory"/root \
         "${bindmounts_ro[@]/#/--bind-ro=}" \
         "${bindmounts_rw[@]/#/--bind=}" pacman -Syu --noconfirm
fi

if (( build )); then
    sudo --preserve-env=GNUPGHOME,PKGDEST makechrootpkg -r "$directory" \
         "${bindmounts_ro[@]/#/-D}" \
         "${bindmounts_rw[@]/#/-d}" "${makechrootpkg_args[@]}"
fi

# vim: set et sw=4 sts=4 ft=sh:
