#!/bin/bash
readonly argv0=aurcheck
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

declare -i geq=0 ver=1 cmp=0 pkg_key=1
declare    mode=aur

# Optimize for the common case (version equality)
my_vercmp() {
    declare -r v_in=$1 v_cmp=$2

    if [[ $v_in != "$v_cmp" ]]; then
        vercmp "$v_in" "$v_cmp"
    else
        printf '%d' 0
    fi
}

sort_by() {
    sort -k "${1}b,$1" -t $'\t' -- "$2"
}

sort_join() {
    # Use single hyphen to fill empty fields as disallowed in pkgver/pkgname
    join -a 2 -e - -o auto -t $'\t' <(sort_by 1 "$1") <(sort_by 1 "$2")
}

cmp_equal_or_newer() {
    while IFS=$'\t' read -r pkg v_cmp v_in _; do
        case $v_cmp in
             -) msg2 "$pkg N/A -> $v_in"
                continue ;;
             *) op=$(my_vercmp "$v_in" "$v_cmp") ;;
        esac

        case $op in
            -1) plain "$pkg $v_cmp is newer than $v_in"
                printf -- '%s\n' "$pkg"     ;;
             0) printf -- '%s\n' "$pkg"     ;;
             1) msg2 "$pkg $v_cmp -> $v_in" ;;
        esac
    done
}

cmp_all() {
    while IFS=$'\t' read -r name base v_cmp v_in; do
        case $base in
            -) printf >&2 -- '%s (not available)\n' "$name"
               continue ;;
            *) op=$(my_vercmp "$v_in" "$v_cmp") ;;
        esac

        case $pkg_key in
            1) [[ $pkg == "$name" ]] && continue
               pkg=$name ;;
            2) [[ $pkg == "$base" ]] && continue
               pkg=$base ;;
        esac

        ((op > -1 && !geq)) && continue

        if ((ver)); then
            case "$op" in
                -1) printf -- '%s %s -> %s\n' "$pkg" "$v_in" "$v_cmp" ;;
                 0) printf -- '%s %s = %s\n'  "$pkg" "$v_in" "$v_cmp" ;;
                 1) printf -- '%s %s <- %s\n' "$pkg" "$v_in" "$v_cmp" ;;
            esac
        else
            printf '%s\n' "$pkg"
        fi
    done
}

namever_aur() {
    xargs -r aursearch -ir | jq -r '.results[] |
        [.Name, .PackageBase, .Version] | @tsv'
}

namever_sync() {
    # pacsift does not error if the repo is not configured
    pacconf --repo="$1" >/dev/null || return 1

    # Use --exact as repos may have a common substring (#166)
    pacsift --exact --repo="$1" --null <&- | \
        xargs -0r pacman -Sddp --print-format %n$'\t'%v
}

repo_parse() {
    awk '/%NAME%/    { getline; printf("%s\t", $1) }
         /%VERSION%/ { getline; printf("%s\n", $1) }'
}

# Ensure comparison on empty database (#273)
fill_empty() {
    awk '{ print } END { if (!NR) printf("-\t-\n") }'
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    plain "usage: $argv0 [-abclq] [-d repository] [-r root]"
    exit 1
}

readonly -f my_vercmp sort_by sort_join cmp_equal_or_newer cmp_all
readonly -f namever_aur namever_sync repo_parse fill_empty trap_exit usage

source /usr/share/makepkg/util.sh || exit

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

unset database root
while getopts :abcd:lqr: OPT; do
    case $OPT in
        a) geq=1            ;;
        b) pkg_key=2        ;;
        q) ver=0            ;;
        d) database=$OPTARG ;;
        c) mode=repo; cmp=1 ;;
        l) mode=repo; cmp=0 ;;
        r) root=$OPTARG     ;;
        *) usage            ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

tmp=$(mktemp) || exit
trap 'trap_exit' EXIT

case $mode in
    aur)
        if [[ -v database ]]; then
            namever_sync "$database" >"$tmp" || exit
        else
            # XXX take input from stdin only when specified (-i)
            tee >"$tmp"
        fi

        cut -f1 "$tmp" | namever_aur | sort_join - "$tmp" | \
            sort_by "$pkg_key" - | cmp_all
        ;;
    repo)
        if [[ ! -v root ]]; then
            root=$(pacconf --single --repo="$database" Server) || exit
            root=${root#*://}
        fi
        
        bsdcat "$root/$database".db | repo_parse | fill_empty >"$tmp" || exit

        if ((cmp)); then
            sort_join "$tmp" - | cmp_equal_or_newer
        else
            cat "$tmp"
        fi
esac

# vim: set et sw=4 sts=4 ft=sh:
