#!/bin/bash
# aur-rpc - interface with AurJson
readonly argv0=rpc
readonly aur_location='https://aur.archlinux.org'
readonly PS4='+(${BASH_SOURCE}:${LINENO}):${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

info() {
    awk -v rpc="$aur_location/rpc/?v=5&type=info" '{
        if (NR == 1)
            printf "%s&arg[]=%s", rpc, $0
        else if (NR % 150 == 0)
            printf "\n%s&arg[]=%s", rpc, $0
        else if (NR > 1)
            printf "&arg[]=%s", $0
    } END {
        printf "\n"
    }'
}

search() {
    awk -v rpc="$aur_location/rpc/?v=5&type=search&by=$1&arg" '{
        printf "%s=%s\n", rpc, $0
    }'
}

dl_stdin() {
    aur jobs -j +8 --halt soon,fail=1 wget -qi - -O -
}

trap_exit() {
    if ! [[ -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    printf >&2 'usage: %s [-t [info|search] ] [-b by]\n' "$argv0"
    exit 1
}

unset by type
while getopts :b:t: opt; do
    case $opt in
        b) by=$OPTARG   ;;
        t) type=$OPTARG ;;
        *) usage        ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

tmp=$(mktemp -dt "$argv0".XXXXXXXX) || exit
trap 'trap_exit' EXIT

# set filters
case $type in
      info) query() { info; }                      ;;
    search) query() { search "${by:-name-desc}"; } ;;
         *) usage                                  ;;
esac

# pipeline
jq -R -r '@uri' | query | dl_stdin

# vim: set et sw=4 sts=4 ft=sh:
