#!/bin/bash
readonly argv0=search
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

declare by=name-desc
declare format=brief
declare sort_key=Name

json_short() {
    jq -r --arg key "$1" '[.results[]] | sort_by(.[$key])[] | .Name,
        .Version,
        .NumVotes,
        .Description' | while
    {
        read -r Name
        read -r Version
        read -r NumVotes
        read -r Description
    }; do
        printf "${BLUE}aur/${ALL_OFF}${BOLD}%s ${GREEN}%s ${ALL_OFF}(%s)\\n    %s\\n" \
               "$Name" "$Version" "$NumVotes" "$Description"
    done
}

json_long() {
    jq -r --arg key "$1" '[.results[]] | sort_by(.[$key])[] | .Name,
        .PackageBase,
        .Version,
        .Description,
        .URL,
        .NumVotes,
        .Popularity,
        .OutOfDate,
        .Maintainer,
        .FirstSubmitted,
        .LastModified' | while
    {
        read -r Name
        read -r PackageBase
        read -r Version
        read -r Description
        read -r URL
        read -r NumVotes
        read -r Popularity
        read -r OutOfDate
        read -r Maintainer
        read -r FirstSubmitted
        read -r LastModified
    }; do
        printf 'Name:            %s\n' "$Name"
        printf 'Base:            %s\n' "$PackageBase"
        printf 'Version:         %s\n' "$Version"
        printf 'Description:     %s\n' "$Description"
        printf 'URL:             %s\n' "$URL"
        printf 'Votes:           %s\n' "$NumVotes"
        printf 'Popularity:      %s\n' "$Popularity"
        printf 'Out Of Date:     %s\n' "$OutOfDate"
        printf 'Maintainer:      %s\n' "$Maintainer"
        printf 'First Submitted: %s\n' "$(date -d @"$FirstSubmitted" '+%c')"
        printf 'Last Modified:   %s\n' "$(date -d @"$LastModified" '+%c')"
        printf '\n'
    done
}

usage() {
    printf >&2 'usage: %s: [-imnrRv] [-k key] package [package...]\n' "$argv0"
    exit 1
}

readonly -f searchby dl_stdin json_short json_long usage

source /usr/share/makepkg/util.sh || exit

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

while getopts :imnk:v OPT; do
    case $OPT in
        i) type=info                  ;;
        m) type=search; by=maintainer ;;
        n) type=search; by=name       ;;
        k) sort_key=$OPTARG           ;;
        v) format=verbose             ;;
        *) usage                      ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if ((!$#)); then
    usage
fi

case $format in
    brief)
        parse() { json_short "$sort_key"; } ;;
    verbose)
        parse() { json_long  "$sort_key"; } ;;
esac

aur-query "$type" "$by" | parse

# vim: set et sw=4 sts=4 ft=sh:
