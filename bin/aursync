#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e -o pipefail -o noclobber

argv0=aursync
aurweb=https://aur.archlinux.org
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX)

XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
AURDEST=${AURDEST:-$XDG_CACHE_HOME/$argv0}

readonly PS4 argv0 aurweb tmp XDG_CACHE_HOME AURDEST

declare -i view=1 build=1 chkver=1 fetch=1
declare -i update=0 snapshot=0 sign=0 rotate=0 chroot=0
declare -i bindro=0 force=0 keep=0 logdest=0 namcap=0 chtemp=0

# stdin: /path/to/repo.git
clone() {
    declare pull=$1 logdir=$2 startdir=$PWD
    declare repo base remote

    while read -r repo _; do
        base=${repo##*/} base=${base%%.git}

        if [[ -d $base/.git ]]; then
            ((pull)) || continue

            cd_safe "$base"
            remote=$(git remote get-url --all origin)

            if [[ ! $remote == "$repo"* ]]; then
                warning "remote $remote does not match $repo"
            fi

            git fetch -v # returns 0 even if nothing was fetched

            if [[ $(git rev-parse HEAD) != $(git rev-parse '@{upstream}') ]]; then
                git --no-pager log --patch --stat '..@{upstream}' >> "$logdir/$base"
                git reset --hard HEAD
                git merge
            fi

            cd_safe "$startdir"
        else
            git clone "$repo"
        fi
    done
}

# stdin: /path/to/a.tar.gz
download() {
    declare gzdir=$1 startdir=$PWD
    cd_safe "$gzdir"

    if type -P aria2c >/dev/null 2>&1; then
        aria2c --stderr=true -i -
    elif type -P parallel >/dev/null 2>&1; then
        parallel --will-cite -X -j +5 --nice 10 --halt soon,fail=1 "curl -fLsS --remote-name-all --cert-status {}"
    else
        xargs -I{} curl -fLsS --remote-name-all --cert-status {}
    fi

    declare a
    cd_safe "$startdir"

    for a in "$gzdir"/*.tar.gz; do
        tar xvf "$a"
    done
}

viewer() {
    if hash 2>/dev/null vifm; then
        vifm - '+view!'
    else
        command -- "${PAGER:-less}"
    fi
}

repo_list() {
    pacconf --repo-list | while read -r repo; do
        printf '%s\t%s\n' "$repo" "$(pacconf --single --repo="$repo" Server)"
    done
}

repo_select() {
    declare repo server
    declare -A avail

    while read -r repo server; do
        if [[ $server =~ ^file:// ]]; then
            avail[$repo]=${server#*://}
        fi
    done < <(repo_list)

    if [[ ${avail[@]} ]]; then
	if [[ ${#avail[@]} -gt 1 ]]; then
            PS3='Select a repository: '

            select repo in "${!avail[@]}"; do
		break
            done
	else
	    repo=${!avail[*]}
	fi
    else
        error "$argv0: no file:// repository found"
        exit 2
    fi

    printf '%s\t%s\n' "$repo" "${avail[$repo]}"
}

basesub() {
    declare -A pkg seen
    declare name base

    while read -r -u 3 name base; do
        pkg[$name]=$base
    done 3< "$1"

    while read -r name _; do
        base=${pkg[$name]}

        if [[ -n $base ]] && [[ -z ${seen[$base]} ]]; then
            printf '%s\n' "${pkg[$name]}"
            seen[$base]=1
        fi
    done
}

lib32_sift() {
    awk -v arch="$(uname -m)" '{
        if(arch == "i686") {
            gsub(/^lib32-/,""); gsub(/^gcc-multilib$/,"")
        };  print
    }'
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    plain "usage: $argv0 [-c] [-B newdir] [-CfLnstT] [-u] [--] pkgname..."
    exit 1
}

trap 'trap_exit' EXIT
source /usr/share/makepkg/util.sh

if [[ -t 2 ]]; then
    colorize
fi

if getopt -T || (($? != 4)); then
    error "$argv0: util-linux getopt required"
    exit 22
fi

longopts=allan,chroot,container,force,keep,log,help,no-build,no-fetch,no-ver,no-view,sign,tar,temp,update,repo:

if TEMP=$(getopt -o B:cCfhkLnstTu -l "$longopts" -n "$argv0" -- "$@"); then
    eval set -- "$TEMP"
else
    usage
fi

while true; do
    case "$1" in
        -B|--bind)      bindro=1;
                        newdir=$2;     shift 2 ;;
        -c|--chroot)    chroot=1;      shift ;;
        -C|--container) container=$2;  shift 2 ;;
        -f|--force)     force=1;       shift ;;
        -k|--keep)      keep=1;        shift ;;
        -L|--log)       logdest=1;     shift ;;
        -n)             namcap=1;      shift ;;
        -s|--sign)      sign=1;        shift ;;
        -T|--temp)      chtemp=1;      shift ;;
        -u|--update)    update=1;      shift ;;
        -t|--tar)       snapshot=1;    shift ;;
        --allan)        rotate=1;      shift ;;
        --no-build)     build=0;       shift ;;
        --no-fetch)     fetch=0;       shift ;;
        --no-ver)       chkver=0;      shift ;;
        --no-view)      view=0;        shift ;;
        --repo)         repo=$2;       shift 2 ;;
        --) shift
            break ;;
        -h|--help)
            usage ;;
    esac
done

if ((rotate)); then
    if { hash rot13 && target=$(aurgrep .+ | shuf -n 1); } 2>/dev/null; then
        exec bash -c "{ \"$argv0\" -cn \"$target\" && repo-elephant; } 2>&1 | rot13"
    else
        echo '?'; exit 16 # EBUSY
    fi
fi

if ! (($# + update)); then
    error "$argv0: no targets specified"
    exit 1
fi

# Set makepkg args in a new list to ensure option context is already
# defined, as getopt parses options from left to right.
if ((chroot)); then
    aurbuild_args+=(-c) makepkg_args=(-cu)

    [[ $container ]] && aurbuild_args+=(-C "$container")
    ((bindro))  && makepkg_args+=(-D "$newdir")
    ((chtemp))  && makepkg_args+=(-T)
    ((namcap))  && makepkg_args+=(-n)
else
    makepkg_args=(-cs)

    ((force))   && makepkg_args+=(-f)
    ((logdest)) && makepkg_args+=(-L)
    ((namcap))  && makepkg_args+=(--noconfirm)
    ((keep))    || makepkg_args+=(-r)
fi

if ((sign)); then
    aurbuild_args+=(-s)
fi

if ((build)) || ((update)); then
    if [[ $repo ]]; then
        root=$(pacconf --single --repo="$repo" Server)
        root=${root#*://}
    else
        dest=$(repo_select)
        read -r repo root <<< "$dest"
    fi

    printf '\n' >| "$root"/_build

    if ! grep -qx -- "$root" <(pacconf CacheDir); then
        error "$argv0: repository path $root is not a cache directory"
        exit 1
    fi

    msg2 "Using [$repo] repository"

    if ((update)); then
        msg "Checking updates..."
        upd=($(aurcheck -- "$repo"))

        set -- "$@" "${upd[@]}"

        if ((!$#)); then
            plain "there is nothing to do"
            exit
        fi
    fi
fi

mkdir -p "$AURDEST"/snapshot
chmod -c 700 "$AURDEST"

cd_safe "$tmp"
mkdir {tsv,json,diff,aurchain}

msg "Resolving dependencies..."
aurchain -a -t "$tmp"/aurchain -- "$@" > queue_0
json_set=("$tmp"/aurchain/json/*)

jq -r '.[].results[] | [.Name,.PackageBase]    | @tsv' "${json_set[@]}" > tsv/pkgbase
jq -r '.[].results[] | [.Name,.Version]        | @tsv' "${json_set[@]}" > tsv/pkgver
jq -r '.[].results[] | [.PackageBase,.URLPath] | @tsv' "${json_set[@]}" > tsv/urlpath

# pkgname -> pkgbase
lib32_sift < queue_0 | basesub tsv/pkgbase > queue_1

if ((build)) && ((chkver)); then
    # pkgver -> pkgver (repo) -> pkgbase (repo)
    aursift -U "$repo" < tsv/pkgver | basesub tsv/pkgbase > sift_1

    # pkgbase \ pkgbase (repo)
    if ! grep -Fxvf sift_1 queue_1 > queue; then
        plain "there is nothing to do"
        exit 0
    fi
else
    # XXX: Make available in AURDEST
    cp -s queue_1 queue
fi

msg "Retrieving build files..."

if ((snapshot)); then
    cd_safe "$AURDEST"/snapshot

    grep -Fwf "$tmp"/queue "$tmp"/tsv/urlpath | awk -v uri="$aurweb" '{
        printf "%s/%s\n", uri, $2
    }' | download "$tmp"
else
    cd_safe "$AURDEST"

    awk -v uri="$aurweb" '{
        printf "%s/%s.git\n", uri, $0
    }' "$tmp"/queue | clone "${fetch:-1}" "$tmp"/diff
fi

# View changes and build files in one window (#77)
if ((view)); then
    ( shopt -s nullglob
      printf '%s\n' "$tmp"/diff/* | cat - "$tmp"/queue | xargs -I{} find {} -maxdepth 1 | viewer
    )
fi

if ((build)); then
    aurbuild_args+=(-d "$repo" -r "$root" -a "$tmp"/queue)

    aurbuild "${aurbuild_args[@]}" -- "${makepkg_args[@]}"
else
    msg "Sources saved to $PWD"
fi

# vim: set et sw=4 sts=4 ft=sh:
