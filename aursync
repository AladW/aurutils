#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e -o pipefail

argv0=aursync
aurweb=https://aur.archlinux.org
tarpath=$aurweb/cgit/aur.git/snapshot
tmp=$(mktemp -d)

XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
AURDEST=${AURDEST:-$XDG_CACHE_HOME/$argv0}

readonly argv0 aurweb rpc tarpath tmp XDG_CACHE_HOME AURDEST

viewer() {
    if hash 2>/dev/null vifm; then
        vifm - '+view!'
    else
        command -- "${PAGER:-less}"
    fi
}

inspect() {
    xargs -i find {} -maxdepth 1 | viewer
}

revcheck() {
    #global tmp
    git fetch

    if [[ $(git rev-parse HEAD) != $(git rev-parse '@{upstream}') ]]; then
        git --no-pager log --patch --stat '..@{upstream}' >> "$tmp"/"$1".diff
        git stash
        git merge
    fi
}

clone() {
    #global aurweb
    while read -r base _; do
        ( if cd "$base" 2>/dev/null; then
              revcheck "$base"
          else
              git clone "$aurweb/$base".git
          fi
        ) >/dev/null
    done
}

aria() {
    #global tarpath tmp
    awk -v uri=$tarpath '{
        gsub("+","%2b")
        gsub("@","%40")
        printf "%s/%s.tar.gz\n", uri, $1
    }' | aria2c -d "$tmp" -i -

    for ar in "$tmp"/*.tar.gz; do
        tar xvf "$ar"
    done
}

trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh

[[ -t 2 ]] && colorize

if ((!$#)); then
    plain "usage: $argv0 [+-cfnt} [--] ARGS..."
    exit 1
fi

while getopts :cdfknt OPT; do
    case $OPT in
        c|+c) aurbuild_args+=(-c) ;;
        d|+d) nobuild=1           ;;
        f|+f) aurbuild_args+=(-f) ;;
        k|+k) insecure=1          ;;
        n|+n) noprepare=1         ;;
        t|+t) download=aria       ;;
        *)    plain "usage: $argv0 [+-cdfknt} [--] ARGS..."
              exit 1 ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

# Operations are done in the cache directory, unless said otherwise.
mkdir -p "$AURDEST" -m 700
cd "$AURDEST"

# Use a separate tar directory to prevent conflicts with git.
if [[ $download == aria ]]; then
    mkdir -p snapshot -m 700
    cd snapshot
fi

# Save the (pkgbase) queue to a temporary copy for later
# processing. Move the download function to the pipe end; clone()
# could print the package name on a successful clone, aria2c however
# dumps everything on stdout, rather than use stderr sensibly.
aurchain "$@" | tee "$tmp"/pkg.ver | "${download:-clone}"

if [[ ! -s "$tmp"/pkg.ver ]]; then
    error "No data available"
    exit 61
fi

if ((nobuild)); then
    msg "Files downloaded to $PWD"
    exit
fi

# Remove version information for grep/find
awk '{print $1}' "$tmp"/pkg.ver > "$tmp"/pkg

if ! ((insecure)); then
    ( shopt -s nullglob
      printf '%s\n' "$tmp"/*.diff | cat - "$tmp"/pkg | inspect
    )
fi

if ! ((noprepare)); then
    grep -Fxvf <(aursift -U < "$tmp"/pkg.ver) "$tmp"/pkg > "$tmp"/pkg.new
else
    cp "$tmp"/pkg "$tmp"/pkg.new
fi

read -r repo pool < <(repofind -s)

aurbuild_args+=(-d "$repo".db -r "$pool" -p "$pool")
aurbuild "${aurbuild_args[@]}" "$tmp"/pkg.new
