#!/bin/bash
# aur-sync - download and build AUR packages automatically
set -o errexit -o pipefail
shopt -s nullglob
shopt -s extglob
readonly argv0=sync
readonly XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
readonly AURDEST=${AURDEST:-$XDG_CACHE_HOME/aurutils/$argv0}
readonly AURDEST_SNAPSHOT=${AURDEST_SNAPSHOT:-$XDG_CACHE_HOME/aurutils/snapshot}
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default arguments
build_args=()
fetch_args=()
makechrootpkg_args=(-cu)
makechrootpkg_makepkg_args=()
makepkg_args=(-cs)

# default options (enabled)
build=1 chkver_depth=2 download=1 view=1 provides=1

# default options (disabled)
chroot=0 list=0 rotate=0 snapshot=0 update=0 repo_list=0 keep_deps=0

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp" "$tmp_view"
    fi
}

viewer() {
    if type -P >/dev/null vifm; then
        vifm -c 'view!' -c 'tree' -c '0' -
    else
        command -- ${PAGER:-less -K}
    fi
}

usage() {
    plain "usage: $argv0 [-ABcDfglLprstTu] [long options] [--] pkgname... [-]"
    exit 1
}

source /usr/share/makepkg/util/util.sh
source /usr/share/makepkg/util/message.sh
source /usr/share/makepkg/util/parseopts.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

opt_short='d:D:AcfgklLpstTu'
opt_long=('bind:' 'bind-rw:' 'database:' 'directory:' 'ignore:' 'repo:' 'root:'
          'makepkg-conf:' 'pacman-conf:' 'allan' 'chroot' 'continue'
          'force' 'ignore-arch' 'ignorearch' 'log' 'noconfirm' 'no-confirm'
          'no-ver' 'nover' 'nover-shallow' 'noprovides' 'no-provides'
          'no-ver-shallow' 'no-view' 'noview' 'print' 'rm-deps'
          'keep' 'sign' 'temp' 'tar' 'upgrades' 'list' 'git'
          'repo-list' 'rebuild' 'rebuildtree' 'rebuild-tree')

if ! parseopts "$opt_short" "${opt_long[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

unset pkg pkg_i root repo
while true; do
    case "$1" in
        -D|--directory)       shift; build_args+=(-D "$1") ;;
        --bind)               shift; makechrootpkg_args+=(-D "$1") ;;
        --bind-rw)            shift; makechrootpkg_args+=(-d "$1") ;;
        --makepkg-conf)       shift; build_args+=(-M "$1") ;;
        --pacman-conf)        shift; build_args+=(-C "$1") ;;
        -A|--ignore?(-)arch)  makepkg_args+=(-A)
                              makechrootpkg_makepkg_args+=(-A) ;;
        -c|--chroot)          chroot=1; build_args+=(-c) ;;
        -f|--force)           build_args+=(-f) ;;
        -g|--git)             snapshot=0 ;;
        -L|--log)             makepkg_args+=(-L) ;;
        -p|--print)           build=0 ;;
        -k|--keep)            keep_deps=1 ;;
        -t|--tar)             snapshot=1 ;;
        -s|--sign)            build_args+=(-sv) ;;
        -T|--temp)            makechrootpkg_args+=(-T) ;;
        --allan)              rotate=1 ;;
        --continue)           download=0 ;;
        --no?(-)confirm)      makepkg_args+=(--noconfirm) ;;
        --no?(-)view)         view=0 ;;
        --)                   shift; break ;;
    esac
    shift
done
unset opt_short opt_long OPTRET

tmp=$(mktemp -dt "$argv0".XXXXXXXX)
tmp_view=$(mktemp -dt view.XXXXXXXX)
trap 'trap_exit' EXIT

if ((rotate)); then
    if { hash rot13 && target=$(aur pkglist | shuf -n 1); } 2>/dev/null; then
        exec bash -c "{ aur \"$argv0\" -c \"$target\" && repo-elephant | rot13; } 2>&1 | rot13"
    else
        echo '?'; exit 16 # EBUSY
    fi
fi

if ((!keep_deps)); then
    makepkg_args+=(-r)
fi

if ! (($#)); then
    error "$argv0: no targets specified"
    exit 1
fi

if ((snapshot)); then
    aur_workdir=$AURDEST_SNAPSHOT
    fetch_args=(-L "$tmp_view" -t)
else
    aur_workdir=$AURDEST
    fetch_args=(-L "$tmp_view" -g)
fi

mkdir -p     "$aur_workdir"
chmod -c 700 "$aur_workdir"

cd_safe "$tmp"

if [[ -s queue ]]; then
    cd_safe "$aur_workdir"
else
    plain "there is nothing to do"
    exit
fi

if ((download)); then
    msg "Retrieving package files"
    
    aur jobs -Xj +3 --nice 10 --halt soon,fail=1 \
        aur fetch "${fetch_args[@]}" :::: "$tmp"/queue
fi

# link build files in the queue (absolute links)
aur jobs -X ln -s "$(pwd -P)"/{} "$tmp_view" :::: "$tmp"/queue

if ((view)); then
    if [[ -v AUR_PAGER ]]; then
        command -- $AUR_PAGER "$tmp_view"
    else
        cd_safe "$tmp_view"
        printf '%s\n' *.patch *.diff | cat - "$tmp"/queue \
            | xargs -I{} find -L "$tmp_view"/{} -maxdepth 1 | viewer

        cd_safe -
    fi
fi

if ((build)); then
    build_args+=(-d "$repo" -r "$root" -a "$tmp"/queue)

    # check if dependency graph is valid
    aur graph "$tmp_view"/*/.SRCINFO >/dev/null

    if ((chroot)); then
        aur build "${build_args[@]}" -- "${makechrootpkg_args[@]}" \
            -- "${makechrootpkg_makepkg_args[@]}"
    else
        aur build "${build_args[@]}" -- "${makepkg_args[@]}"
    fi
else
    xargs -a "$tmp"/queue -I{} printf '%s\n' "$(pwd -P)"/{}
fi

# vim: set et sw=4 sts=4 ft=sh:
