#!/bin/bash
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -e

argv0=aurbuild
pwd=$PWD
tmp=$(mktemp -dt "$argv0".XXXXXXXXXX)

readonly argv0 pwd tmp

# Use an option array to allow later modification by getopts.
mkpkg_args=(-crs)
mkchr_args=(-cu)

# The repo equivalent of "makepkg -i". An interesting side effect is
# that pacman now considers packages inside the official repositories
# as "local", and warns if they are newer than a custom counterpart.
build_local() {
    #global database pool root sign mkpkg_args

    PKGDEST="$pool" LC_MESSAGES=C makepkg "${mkpkg_args[@]}" "$sign"
    repose "$sign" -vf "$database" -r "$root" -p "$pool"

    printf '%s\n%s\n' "[$database]" "$(pacconf --repo="$database")" > "$tmp"/config
    sudo pacman -Syu --config="$tmp"/config
}

# With an nspawn container, packages are always built against latest
# official packages, and are upgraded together on a local -Syu.  As
# '/pkgdest' is hardcoded in makechrootpkg, packages are rebuilt even
# if already available.
build_chroot() {
    #global CHROOT database pool root sign mkchr_args

    # Skip verification checks in the chroot instance as .gnupg paths
    # are hardcoded in makechrootpkg. Signatures are still verified
    # outside the chroot. Preserve PKGDEST with sudo -E, see FS#44827.
    sudo -E PKGDEST="$pool" makechrootpkg -r "$CHROOT" -d "$pool" "${mkchr_args[@]}" -- "$sign"
    repose "$sign" -vf "$database" -r "$root" -p "$pool"
}

# If a package is rebuilt (same pkgver), checksums in the database no
# longer match cached versions. (#85)
clean_cache() {
    declare cache pkgext fullver filepath

    read -r cache  < <(pacconf CacheDir)
    read -r pkgext < <(pacini /etc/makepkg.conf PKGEXT | tr -d \'\")

    while read -r fullver; do
        filepath="$cache/$fullver$pkgext"

        if [[ -f $filepath ]]; then
            sudo rm -vf "$filepath"
        fi
    done < <(makepkg --packagelist)
}

usage() {
    plain "Usage: $argv0 [-c] [-s] -a <queue> -d <database> -p <pool> -r <root> [--] [<makepkg/makechrootpkg args>]"
}

trap 'exit' INT
trap 'rm -rf "$tmp"' EXIT

source /usr/share/makepkg/util.sh

[[ -t 2 ]] && colorize

while getopts :a:cd:p:r:s OPT; do
    case $OPT in
        a) queue="$OPTARG"    ;;
        c) build=build_chroot ;;
        d) database="$OPTARG" ;;
        p) pool="$OPTARG"     ;;
        r) root="$OPTARG"     ;;
        s) sign="--sign"      ;;
        :) case $OPTARG in
                a) error "$argv0: No package queue specified (-a)"; usage; exit 1 ;;
                d) error "$argv0: No repository database specified (-d)"; usage; exit 1 ;;
                p) error "$argv0: No package pool specified (-p)"; usage; exit 1 ;;
                r) error "$argv0: No repository root specified (-r)"; usage; exit 1 ;;
            esac ;;
        ?) error "$argv0: Option not recognized (-$OPTARG)"; usage; exit 1; ;;
    esac
done

# Validate arguments
re_blank='^[[:space:]]*$'
if [[ $queue =~ $re_blank || $database =~ $re_blank || $pool =~ $re_blank || $root =~ $re_blank ]]; then
    error "$argv0: Missing arguments" && usage
    exit 1
elif [[ ! -r $queue ]]; then
    error "$argv0: $queue: Permission denied"
    exit 13
elif [[ ! -d $pool ]]; then
    error "$argv0: $pool: not a directory"
    exit 20
elif [[ ! -w $pool ]]; then
    error "$argv0: $pool: permission denied"
    exit 13
elif [[ ! -d $root ]]; then
    error "$argv0: $root: not a directory"
    exit 20
elif [[ ! -w $root ]]; then
    error "$argv0: $root: permission denied"
    exit 13
fi

# Pass all arguments after -- to makepkg/makechrootpkg.
if [[ $build == build_chroot ]]; then
    mkchr_args+=("${@:$OPTIND}")
else
    mkpkg_args+=("${@:$OPTIND}")
fi

if [[ $sign == --sign ]]; then
    # Pass socket and environment to the build chroot.
    mkchr_args+=("-d" "$HOME/.gnupg/S.gpg-agent:/build/.gnupg/S.gpg-agent")
    mkchr_args+=("-e" "GPG_TTY=$(tty)" "-e" "DISPLAY=$DISPLAY")
fi

if [[ $build == build_chroot ]]; then
    CHROOT=/var/lib/aurbuild

    if [[ ! -d $CHROOT/root ]]; then
        sudo install -d "$CHROOT"
        sudo mkarchroot "$CHROOT"/root base base-devel
    fi

    # Update settings from /etc/pacman.conf and includes
    pacconf --raw > "$tmp"/pacman.conf
    sudo cp -v "$tmp"/pacman.conf "$CHROOT"/root/etc/pacman.conf
fi

# Read from FD 3 to choose providers with makepkg (#21)
exec 3< "$queue"

while read -r -u 3 pkg _; do
    if cd "$pwd/$pkg"; then
        "${build:-build_local}"
        "${clean:-clean_cache}"
    fi
done

exec 3<&-

# vim: set et sw=4 sts=4 ft=sh:
