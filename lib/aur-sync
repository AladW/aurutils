#!/bin/bash
# aur-sync - download and build AUR packages automatically
set -o errexit -o pipefail
shopt -s nullglob
readonly argv0=sync
readonly XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
readonly AURDEST=${AURDEST:-$XDG_CACHE_HOME/aurutils/$argv0}
readonly AURDEST_SNAPSHOT=${AURDEST_SNAPSHOT:-$XDG_CACHE_HOME/aurutils/snapshot}
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default arguments
build_args=()
fetch_args=()
makechrootpkg_args=(-cu)
makechrootpkg_makepkg_args=()
makepkg_args=(-cs)

# default options (enabled)
build=1 chkver=1 download=1 view=1

# default options (disabled)
chroot=0 list=0 rotate=0 snapshot=0 update=0 provides=0 repo_list=0 chkver_deps_only=0

lib32() {
    awk -v arch="$(uname -m)" '{
        if(arch == "i686") {
            gsub(/^lib32-/,"")
            gsub(/^gcc-multilib$/,"")
        }; print
    }'
}

conf_file_repo() {
    awk -F'= ' '
        $1 ~ /^\[.+\]$/ {
            repo = substr($1, 2, length($1)-2)
        }
        $1 ~ /^Server/ && $2 ~ /^file:/ {
            printf("%s\n%s\n", repo, $2)
        }'
}

db_namever() {
    awk '/%NAME%/ {
        getline
        printf("%s\t", $1)
    }
    /%VERSION%/ {
        getline
        printf("%s\n", $1)
    }'
}

db_fill_empty() {
    awk '{print} END {
        if (!NR)
            printf("%s\t%s\n", "(none)", "(none)")
    }'
}

# fields: $1 pkgname, $2 pkgbase, $3 pkgver
select_pkgbase() {
    awk 'NR == FNR {
            a[$0]; next
        } {
            if($1 in a && !($2 in seen)) {
                print $0; seen[$2]
            }
        }' "$@"
}

# fields: $1 pkgname, $2 depends[<>=]
tr_ver() {
    awk -F'[<>=]' '{print $1}'
}

complement() {
    # empty set should not return 1
    grep -Fxvf "$@" || return $(($?-1))
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
        rm -rf "$tmp" "$tmp_view"
    fi
}

usage() {
    plain "usage: $argv0 [-ABcDfglLprstTu] [long options] [--] pkgname... [-]"
    exit 1
}

source /usr/share/makepkg/util/util.sh
source /usr/share/makepkg/util/message.sh

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

if getopt -T || (($? != 4)); then
    error "$argv0: util-linux getopt required"
    exit 22
fi

longopts=allan,bind:,chroot,directory:,force,ignore:,ignorearch,ignore-arch,log
longopts+=,noconfirm,no-confirm,nover,no-ver,noview,no-view,print,rmdeps,rm-deps
longopts+=,sign,temp,tar,repo:,database:,root:,upgrades,nhehgvyf,continue,list,git
longopts+=,makepkg-conf:,pacman-conf:,provides,repo-list,nover-shallow,no-ver-shallow
shortopts=d:D:AcfglLnprstTu

if optstring=$(getopt -o "$shortopts" -l "$longopts" -n "$argv0" -- "$@"); then
    eval set -- "$optstring"
else
    usage
fi

tmp=$(mktemp -dt "$argv0".XXXXXXXX)
tmp_view=$(mktemp -dt view.XXXXXXXX)
trap 'trap_exit' EXIT

unset pkg pkg_i root repo
while true; do
    case "$1" in
        -c|--chroot)
            chroot=1
            build_args+=(-c)
            shift ;;
        -f|--force)
            build_args+=(-f)
            shift ;;
        -s|--sign)
            build_args+=(-sv)
            shift ;;
        -D|--directory)
            build_args+=(-D "$2")
            shift 2 ;;
        --makepkg-conf)
            build_args+=(-M "$2")
            shift 2 ;;
        --pacman-conf)
            build_args+=(-C "$2")
            shift 2 ;;
        --bind)
            makechrootpkg_args+=(-D "$2")
            shift 2 ;;
        -T|--temp)
            makechrootpkg_args+=(-T)
            shift ;;
        -A|--ignorearch|--ignore-arch)
            makepkg_args+=(-A)
            makechrootpkg_makepkg_args+=(-A)
            shift ;;
        -L|--log)
            makepkg_args+=(-L)
            shift ;;
        --noconfirm|--no-confirm)
            makepkg_args+=(--noconfirm)
            shift ;;
        -l|--list)
            list=1
            shift ;;
        --repo-list)
            repo_list=1
            shift ;;
        -r|--rmdeps|--rm-deps)
            makepkg_args+=(-r)
            shift ;;
        -p|--print)
            build=0
            shift ;;
        -g|--git)
            snapshot=0
            shift ;;
        -t|--tar)
            snapshot=1
            shift ;;
        -u|--upgrades)
            update=1
            shift ;;
        --allan|--nhehgvyf)
            rotate=1
            shift ;;
        --continue)
            download=0
            shift ;;
        --ignore)
            IFS=, read -a pkg -r <<< "$2"
            pkg_i+=("${pkg[@]}")
            shift 2 ;;
        --nover|--no-ver)
            chkver=0
            shift ;;
        --nover-shallow|--no-ver-shallow)
            chkver_deps_only=1
            shift ;;
        --noview|--no-view)
            view=0
            shift ;;
        --provides)
            provides=1
            shift ;;
        -d|--database|--repo)
            repo=$2
            shift 2 ;;
        --root)
            root=$2
            shift 2 ;;
        *)
            shift
            break ;;
    esac
done

if ((rotate)); then
    if { hash rot13 && target=$(aur pkglist | shuf -n 1); } 2>/dev/null; then
        exec bash -c "{ aur \"$argv0\" -c \"$target\" && repo-elephant | rot13; } 2>&1 | rot13"
    else
        echo '?'; exit 16 # EBUSY
    fi
fi

if ((repo_list)); then
    pacconf | conf_file_repo
    exit
fi

if [[ ${repo=$AUR_REPO} ]]; then
    server=$(pacconf --single --repo="$repo" Server)
    server=${server#*://}
else
    mapfile -t conf < <(pacconf | conf_file_repo)

    case ${#conf[@]} in
        2) repo=${conf[0]}
           root=${conf[1]#*://} ;;
        0) error "$argv0: no file:// repository found"
           exit 2 ;;
        *) error "$argv0: repository choice is ambiguous (use --repo to specify)"
           printf '%s\n' "${conf[@]}" | paste - - | column -t >&2
           exit 2 ;;
    esac
fi

if ! (($# + update + list)); then
    error "$argv0: no targets specified"
    exit 1
fi

msg2 "Using [$repo] repository"
root=$(realpath -- "${root-$server}")

if ! [[ -w $root/$repo.db && -r $root/$repo.db ]]; then
    error "$argv0: $repo: permission denied (read-write)"
    exit 13
fi

if ((snapshot)); then
    aur_workdir=$AURDEST_SNAPSHOT
    fetch_args=(-L "$tmp_view" -t)
else
    aur_workdir=$AURDEST
    fetch_args=(-L "$tmp_view" -g)
fi

mkdir -p     "$aur_workdir"
chmod -c 700 "$aur_workdir"

cd_safe "$tmp"

# parse repo contents
bsdcat "$root/$repo".db | db_namever | db_fill_empty >db_info

if ((list)); then
    while read -r pkgname pkgver; do
        printf '%q\t%s\t%s\n' "$repo" "$pkgname" "$pkgver"
    done <db_info

    exit
fi

{ for arg in "$@"; do
      case $arg in
          -) cat ;;
          *) printf '%s\n' "$arg" ;;
      esac
  done

  if ((update)); then
      aur vercmp <db_info | cut -d: -f1
  fi
} >argv

if [[ -s argv ]]; then
    # $1 pkgname $2 depends $3 pkgbase $4 pkgver
    aur depends <argv | tee deps | cut -f2 --complement | sort -u >pkginfo
else
    plain "there is nothing to do"
    exit
fi

if ((chkver_deps_only)); then
    chkver_argv() { complement argv; }
else
    chkver_argv() { tee; }
fi

{ if ((${#pkg_i[@]})); then
      printf >&2 'warning: ignoring %s package\n' "${pkg_i[@]}"
      printf '%s\n' "${pkg_i[@]}"
  fi

  if ((chkver)); then
      # packages with equal or newer versions are taken as complement
      # for the queue. if chkver_deps_only is enabled, packages on the
      # command-line are excluded from this complement.
      cut -f1,3 pkginfo | aur vercmp -p db_info -c | chkver_argv
  fi

  if ((provides)); then
      # note: this uses pacman's copy of the repo (as used by makepkg -s)
      cut -f1 pkginfo | complement argv | aur repo-filter -d "$repo"
  fi
} >filter

# pkgname queue (AUR + repos)
cut -f1,2 deps | tr_ver | tsort | tac | lib32 | complement filter >queue_0

# pkgbase queue (AUR)
select_pkgbase queue_0 pkginfo | cut -f2 >queue

if [[ -s queue ]]; then
    cd_safe "$aur_workdir"
else
    plain "there is nothing to do"
    exit
fi

if ((download)); then
    aur jobs -X aur fetch "${fetch_args[@]}" :::: "$tmp"/queue
fi

# link build files in the queue (absolute links)
aur jobs -Xj1 ln -s "$(pwd -P)"/{} "$tmp_view" :::: "$tmp"/queue

if ((view)); then
    cd_safe "$tmp_view"

    if [[ -v AUR_PAGER ]]; then
        command -- $AUR_PAGER
    elif type -P vifm >/dev/null; then
        find -L . -maxdepth 2 -mindepth 1 | vifm - '+view!'
    else
        find -L "$tmp_view" -maxdepth 2 | command -- ${PAGER:-less}
    fi

    cd_safe -
fi

if ((build)); then
    build_args+=(-d "$repo" -r "$root" -a "$tmp"/queue)

    # check if dependency graph is valid
    aur graph "$tmp_view"/*/.SRCINFO >/dev/null

    if ((chroot)); then
        aur build "${build_args[@]}" -- "${makechrootpkg_args[@]}" \
            -- "${makechrootpkg_makepkg_args[@]}"
    else
        aur build "${build_args[@]}" -- "${makepkg_args[@]}"
    fi
else
    aur jobs -Xj1 printf '%s\n' "$(pwd -P)"/{} :::: "$tmp"/queue
fi

# vim: set et sw=4 sts=4 ft=sh:
