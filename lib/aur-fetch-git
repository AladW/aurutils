#!/bin/bash
# aur-fetch-git - retrieve build files using git
set -o errexit
readonly argv0=fetch-git
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# default options
log=stdout

merge_upstream() {
    git fetch -v >&2

    # default to showing PKGBUILD diffs first (#399)
    if [[ ! -s ${GIT_WORK_TREE:-$PWD}/git.orderfile ]]; then
        echo PKGBUILD > "${GIT_WORK_TREE:-$PWD}"/git.orderfile
    fi

    if [[ $(git rev-parse HEAD) != $(git rev-parse '@{upstream}') ]]; then
        # only print log on upstream changes
        git --no-pager log -O "${GIT_WORK_TREE:-$PWD}"/git.orderfile \
            --patch --stat '..@{upstream}' >> "${1:-/dev/stdout}"

        # discard any local changes (#349)
        git reset --hard HEAD@{upstream} >&2
    fi
}

merge_across_fs() {
    # avoid issues with filesystem boundaries (#274)
    GIT_DIR="$PWD/$1"/.git GIT_WORK_TREE="$PWD/$1" merge_upstream "$2"
}

usage() {
    printf >&2 'usage: %s [-L log_dir]\n' "$argv0"
    exit 1
}

while getopts :L: opt; do
    case $opt in
        L) log_dir=$OPTARG
           log=directory ;;
        *) usage ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

# set filters
case $log in
    directory) merge() { merge_across_fs "$1" "$log_dir/$1".patch; } ;;
       stdout) merge() { merge_across_fs "$1"; } ;;
esac

while IFS= read -r uri; do
    pkg=${uri##*/}   # strip path
    pkg=${pkg%%.git} # strip .git suffix

    if [[ -d $pkg/.git ]]; then
        merge "$pkg"
    else
        git clone "$uri"
    fi
done

# vim: set et sw=4 sts=4 ft=sh:
