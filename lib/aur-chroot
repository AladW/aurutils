#!/bin/bash
# aur-chroot - build packages with systemd-nspawn
set -o errexit
readonly argv0=chroot
readonly PATH=/bin:/usr/bin
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

machine=$(uname -m)
readonly machine

# default arguments
directory=/var/lib/aurbuild/$machine
makechrootpkg_args=(-cu)
makechrootpkg_bindmounts_ro=()
bindmounts_ro=()

# default options
prepare=1 build=1

get_repo_config() {
    printf '[%s]\n' "$2"
    pacconf --config="$1" --repo="$2"
}

get_cachedir() {
    pacconf --config="$1" CacheDir
}

trap_exit() {
    if ! [[ -o xtrace ]]; then
        rm -rf "$tmp"
    fi
}

usage() {
    printf >&2 'usage: %s [-CDLM <path>] [-d <repo>] [-BP] -- <makechrootpkg args>' "$argv0"
    exit 1
}

unset pacman_conf makepkg_conf host_repo host_conf server
while getopts :BPd:r:C:D:L:M: opt; do
    case $opt in
        d) host_repo=$OPTARG    ;;
        L) host_conf=$OPTARG    ;;
        C) pacman_conf=$OPTARG  ;;
        M) makepkg_conf=$OPTARG ;;
        D) directory=$OPTARG    ;;
        B) build=0   ;;
        P) prepare=0 ;;
        *) usage     ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

# reset default makechrootpkg arguments
if (($#)); then
    makechrootpkg_args=("$@")
fi

# baseline configuration
readonly pacman_conf=${pacman_conf-/usr/share/devtools/pacman-extra.conf}
readonly makepkg_conf=${makepkg_conf-/usr/share/devtools/makepkg-$machine.conf}
readonly host_conf=${host_conf-/etc/pacman.conf}

trap 'trap_exit' EXIT
tmp=$(mktemp -d)

# FIXME possibly extend -d to multiple local repos
if [[ ${host_repo=$AUR_REPO} ]]; then
    get_repo_config "$host_conf" "$host_repo"
fi >"$tmp"/custom.conf

# FIXME custom.conf may contain (besides http:// or others) multiple
# file:// entries for a single local repo
server=$(pacini --section="$host_repo" "$tmp"/custom.conf Server | grep -Em1 '^file://')
server=${server#file://}

if [[ $server ]]; then
    bindmounts_ro+=("--bind-ro=$server")
    makechrootpkg_bindmounts_ro+=('-D' "$server")
fi

# Note: any CacheDir entries are bind-mounted by arch-nspawn (bind-rw
# for the first entry, bind-ro for any others)
if ((prepare)); then
    cat "$pacman_conf" "$tmp"/custom.conf >"$tmp"/pacman.conf

    if [[ -f $directory/root/.arch-chroot ]]; then
        # locking is done by systemd-nspawn
        sudo arch-nspawn -C "$tmp"/pacman.conf -M "$makepkg_conf" \
             "$directory"/root "${bindmounts_ro[@]}" pacman -Syu --noconfirm
    else
        if [[ ! -d $directory ]]; then
            # parent path is not created by mkarchroot (#371)
            sudo install -d "$directory" -m 755 -v
        fi
        sudo mkarchroot  -C "$tmp"/pacman.conf -M "$makepkg_conf" \
             "$directory"/root base-devel
    fi
fi

if ((build)); then
    sudo PKGDEST="${PKGDEST:-$PWD}" makechrootpkg -r "$directory" \
         "${makechrootpkg_bindmounts_ro[@]}" "${makechrootpkg_args[@]}"
else
    printf >&2 'container path: %q\n' "$directory"
    exit 0
fi

# vim: set et sw=4 sts=4 ft=sh:
