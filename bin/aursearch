#!/bin/bash
readonly argv0=aursearch
readonly PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

searchby() {
    declare -r aurweb='https://aur.archlinux.org'

    if [[ $1 != none ]]; then
        awk -v rpc="$aurweb/rpc/?v=5&type=search&by=$1&arg" '{
            printf "%s=%s\n", rpc, $0
        }'
    else
        awk -v rpc="$aurweb/rpc/?v=5&type=info" '{
            if (NR == 1)
                printf "%s&arg[]=%s", rpc, $0
            else if (NR % 150 == 0)
                printf "\n%s&arg[]=%s", rpc, $0
            else if (NR > 1)
                printf "&arg[]=%s", $0
        } END {
            printf "\n"
        }'
    fi
}

dl_stdin() {
    if type -P parallel >/dev/null 2>&1; then
        parallel --will-cite -X -j +8 --nice 10 --halt soon,fail=1 -r \
            curl -fgLsS --compressed --cert-status {}
    else
        xargs -r curl -fgLsS --compressed --cert-status
    fi
}

json_short() {
    jq -e -r "[.results[]] | sort_by(.$sort_by)[] | .Name,
        .Version,
        .NumVotes,
        .Description" | while
    {
        read -r Name
        read -r Version
        read -r NumVotes
        read -r Description
    }; do
        printf "${BLUE}aur/${ALL_OFF}${BOLD}%s ${GREEN}%s ${ALL_OFF}(%s)\\n    %s\\n" \
               "$Name" "$Version" "$NumVotes" "$Description"
    done
}

json_long() {
    jq -e -r "[.results[]] | sort_by(.$sort_by)[] | .Name,
        .PackageBase,
        .Version,
        .Description,
        .URL,
        .NumVotes,
        .Popularity,
        .OutOfDate,
        .Maintainer,
        .FirstSubmitted,
        .LastModified" | while
    {
        read -r Name
        read -r PackageBase
        read -r Version
        read -r Description
        read -r URL
        read -r NumVotes
        read -r Popularity
        read -r OutOfDate
        read -r Maintainer
        read -r FirstSubmitted
        read -r LastModified
    }; do
        printf 'Name:            %s\n' "$Name"
        printf 'Base:            %s\n' "$PackageBase"
        printf 'Version:         %s\n' "$Version"
        printf 'Description:     %s\n' "$Description"
        printf 'URL:             %s\n' "$URL"
        printf 'Votes:           %s\n' "$NumVotes"
        printf 'Popularity:      %s\n' "$Popularity"
        printf 'Out Of Date:     %s\n' "$OutOfDate"
        printf 'Maintainer:      %s\n' "$Maintainer"
        printf 'First Submitted: %s\n' "$(date -d @"$FirstSubmitted" '+%c')"
        printf 'Last Modified:   %s\n' "$(date -d @"$LastModified" '+%c')"
        printf '\n'
    done
}

usage() {
    printf >&2 '%s\n' "usage: $argv0 [-imnrRv] package [package...]"
    exit 1
}

readonly -f searchby dl_stdin json_short json_long usage

source /usr/share/makepkg/util.sh || exit

if [[ -t 2 && ! -o xtrace ]]; then
    colorize
fi

parse() { json_short; }
by=name-desc
sort_by=Name

while getopts :imnk:rRv OPT; do
    case $OPT in
        i) by=none ;;
        m) by=maintainer ;;
        n) by=name ;;
        k) sort_by=$OPTARG ;;
        r) parse() { tee; } ;;
        R) parse() { sed 's/^/[/; s/}{/},{/g; s/$/]/' ; } ;;
        v) parse() { json_long; } ;;
        *) usage ;;
    esac
done
shift $((OPTIND - 1))
OPTIND=1

if ((!$#)); then
    usage
fi

printf -- '%s\n' "$@" | jq -R -r '@uri' | searchby "$by" | dl_stdin | parse

# vim: set et sw=4 sts=4 ft=sh:
